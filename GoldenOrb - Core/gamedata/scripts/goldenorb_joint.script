----------------------------------------------------------------------------
-- GoldenOrb: Joint
----------------------------------------------------------------------------
-- An abstraction over physics joints
----------------------------------------------------------------------------
-- Implemented by Lhan
----------------------------------------------------------------------------

-- Imports

--- Math
local deg = cl_math.deg

--- Logging
local log = goldenorb_logging.logger(
   "GoldenOrb/Joint",
   goldenorb_logging.TRACE
)

-- Implementation

--- Joint Metatable
---@class joint
---@field vec vector
Joint = {}

--- Joint Constructor
---@return joint
function joint()
   return setmetatable(
      { vec = vector() },
      { __index = Joint }
   )
end

---@param impulse vector
---@return joint
function Joint:impulse(impulse)
   if not impulse then
      assert(nil, string.format("Invalid impulse: %s", impulse))
   end
   self.vec:add(impulse)
   return self
end

---@param f fun(v: vector): vector
---@return joint
function Joint:impulse_with(f)
   if not f then
      assert(nil, string.format("Invalid impulse function: %s", f))
   end
   self.vec:add(f(self.vec))
   return self
end

---@param state table
---@return table
function Joint:apply_hud_orientation(state)
   if not state.hud then
      return state
   end

   state.hud.hands_orientation:add(
      vector():set(
         deg(self.vec.x),
         deg(self.vec.y),
         deg(self.vec.z)
      )
   )

   return state
end
