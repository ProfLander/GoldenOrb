----------------------------------------------------------------------------
-- GoldenOrb: Spring
----------------------------------------------------------------------------
-- An abstraction over spring forces
----------------------------------------------------------------------------
-- Implemented by Lhan
----------------------------------------------------------------------------

-- Imports

--- Math
local DEG2RAD = cl_math.DEG2RAD
local sign = cl_math.sign
local vector_axis_angle = cl_math.vector_axis_angle
local axis_angle_to_euler = cl_math.axis_angle_to_euler

--- MCM Builder
local Title = mcm_builder.Title
local List = mcm_builder.List
local InputField = mcm_builder.InputField

--- String
local parse_vector = cl_string.parse_vector

--- Function
local id = cl_function.id

--- Logging
local log = cl_logging.logger(
   "GoldenOrb/Spring",
   cl_logging.TRACE
)

-- Constants

SP_LINEAR = 0
SP_ANGULAR = 1

-- Implementation

---@param length number
---@param strength number
---@param f number
---@return number
function spring_1d(length, strength, f)
   if f == nil then
      assert(nil, string.format("Invalid spring input: %s", f))
   end
   ---@cast f number
   return -math.max(math.abs(f) - length, 0)
      * sign(f)
      * strength
end

---@param length vector
---@param strength vector
---@return fun(vec: vector): vector
function spring_3d_linear(length, strength)
   return function(vec)
      log("spring_3d_linear(%s, %s)(%s)", length, strength, vec)

      return vector():set(
         spring_1d(length.x, strength.x, vec.x),
         spring_1d(length.y, strength.y, vec.y),
         spring_1d(length.z, strength.z, vec.z)
      )
   end
end

---@param length vector
---@param strength vector
---@return fun(vec: vector): vector
function spring_3d_angular(length, strength)
   return function(vec)
      log("spring_3d_angular(%s, %s, %s)", length, strength, vec)
      local axis, angle = vector_axis_angle(vector():set(vec), vector():set(0, 0, 1))
      if not axis or not angle then
         printf("invalid rotation")
         return vector()
      end
      log("  axis: %s", axis)
      log("  angle: %s", angle)

      local ofs = math.max(length.x, length.y, length.z)
      local fac = 1
      if length.x > length.y then
         fac = math.cos(vec.y / length.y)
      elseif length.x < length.y then
         fac = math.cos(vec.x / length.x)
      end
      angle = spring_1d(ofs * fac, 1, angle)

      local euler = axis_angle_to_euler(axis, angle)
      euler.x = -euler.x
      euler.z = -euler.z
      return euler:mul(strength)
   end
end

---@param ty number
---@param length vector
---@param strength vector
---@return fun(vec: vector): vector
function spring(ty, length, strength)
   if type(ty) ~= "number" then
      assert(
         nil,
         string.format("Invalid spring type %s", ty)
      )
   end
   if type(length) ~= "userdata" then
      assert(
         nil,
         string.format("Invalid spring length %s", ty)
      )
   end
   ---@cast length vector
   if type(strength) ~= "userdata" then
      assert(
         nil,
         string.format("Invalid spring strength %s", ty)
      )
   end
   ---@cast strength vector
   if ty == SP_LINEAR then
      return spring_3d_linear(length, strength)
   elseif ty == SP_ANGULAR then
      return spring_3d_angular(length, strength)
   end

   assert(nil, "Invalid spring type %s", ty)
   return id
end

---@class mcm_spring
---@field type any
---@field strength any
---@field length any
---@field spring fun(vec: vector): vector

---@param page any
---@param type? number
---@param length? string
---@param strength? string
---@param prefix? string
---@return mcm_spring
function mcm_spring(page, type, length, strength, prefix)
   prefix = prefix or ""

   --- Spring Title
   page:settings(Title.new(prefix .. "spring_title"):text(prefix .. "spring"))

   --- Spring Settings
   local spring_type, spring_length, spring_strength =
      page:settings(
         List.new(prefix .. "spring_type")
            :content({
               {SP_LINEAR, "linear"},
               {SP_ANGULAR, "angular"},
            })
            :input_type("float")
            :default(type),
         InputField.new(prefix .. "spring_length")
            :default(length),
         InputField.new(prefix .. "spring_strength")
            :default(strength)
      )

   return {
      type = spring_type,
      length = spring_length,
      strength = spring_strength,
      spring = function(v)
         local t = spring_type:get()
         local l = parse_vector(spring_length:get())
         local s = parse_vector(spring_strength:get())
         if t == SP_ANGULAR then
            l:mul(DEG2RAD)
         end
         return spring(t, l, s)(v)
      end
   }
end
