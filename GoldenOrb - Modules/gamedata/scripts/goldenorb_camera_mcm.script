----------------------------------------------------------------------------
-- GoldenOrb: Camera State
----------------------------------------------------------------------------
-- Implemented by Lhan
----------------------------------------------------------------------------

-- Imports

--- Goldenorb
local tree = goldenorb_mcm.tree

--- Schedule
local ACTOR_ON_UPDATE = goldenorb_schedule.ACTOR_ON_UPDATE
local LEVEL_CALL = goldenorb_schedule.LEVEL_CALL

--- Main
local goldenorb_before_build_state = goldenorb_main.goldenorb_before_build_state
local goldenorb_after_build_state = goldenorb_main.goldenorb_after_build_state
local goldenorb_before_modify_state = goldenorb_main.goldenorb_before_modify_state
local goldenorb_after_modify_state = goldenorb_main.goldenorb_after_modify_state
local goldenorb_before_apply_state = goldenorb_main.goldenorb_before_apply_state
local goldenorb_after_apply_state = goldenorb_main.goldenorb_after_apply_state

--- Gimbals
local C_GIMBALS = goldenorb_gimbals.C_GIMBALS

--- Matrices
local C_MATRICES = goldenorb_matrices.C_MATRICES

--- Matrices
local C_ACTOR = goldenorb_actor.C_ACTOR

--- Schedule
local system = goldenorb_schedule.system

--- Level
local set_cam_custom_position_direction = level.set_cam_custom_position_direction
local remove_cam_custom_position_direction = level.remove_cam_custom_position_direction

--- MCM Builder
local ImageWithText = mcm_builder.ImageWithText
local Trackbar = mcm_builder.Trackbar

--- Logging
local log = goldenorb_logging.logger(
   "GoldenOrb/Camera",
    goldenorb_logging.TRACE
)

-- Constants

local DIST = 1000

-- State

local page = tree:pages("camera")

page:settings(
   ImageWithText.new("camera_title"):text("camera")
)

local smoothing = page:settings(
   Trackbar.new("smoothing")
      :default(-1)
      :minmax(-1, 60)
      :increment(1)
)

-- Implementation

--- Rotation getter
---@return vector
function get_camera_position()
   return device().cam_pos
end

---@return vector
function get_camera_direction()
   return device().cam_dir
end

---@return vector
function get_camera_rotation()
   local dir = get_camera_direction()
   return vector():set(
      math.atan2(dir.x, dir.z),
      math.sin(dir.y),
      0
   )
end


--- Aim point getter
---@return vector
function get_camera_aim_point()
   log:trace("get_camera_aim_point()")
   return device().cam_dir
      :mul(DIST)
      :add(device().cam_pos)
end

---@class state_cam
---@field enable boolean
---@field pos vector
---@field rot vector
---@field smoothing number
---@field show_hud boolean
---@field affect_hud boolean

function camera_matrix()
   local dev = device()
   return matrix():set(
      dev.cam_right,
      dev.cam_top,
      dev.cam_dir,
      dev.cam_pos
   )
end

function matrix_transpose(mat)
   return matrix():set(
      vector():set(mat.i.x, mat.j.x, mat.k.x),
      vector():set(mat.i.y, mat.j.y, mat.k.y),
      vector():set(mat.i.z, mat.j.z, mat.k.z),
      vector()
   )
end

C_CAMERA = "camera"
C_CAM_FLAG = "_cam_custom_position_direction"

--- Inject the camera gimbal into the state
inject_camera_gimbal = system("inject_camera_gimbal")
   :runs_after(goldenorb_before_build_state)
   :runs_before(goldenorb_after_build_state)
   :without({C_GIMBALS, C_CAMERA})
   :writes({C_GIMBALS, C_CAMERA})
   :via(function()
      return {
         [C_GIMBALS] = {
            [C_CAMERA] = vector()
         }
      }
   end)
   :during(ACTOR_ON_UPDATE)

--- Derive the camera matrix from the camera gimbal
derive_camera_matrix = system("derive_camera_matrix")
   :runs_after(inject_camera_gimbal)
   :runs_before(goldenorb_after_build_state)
   :reads({C_GIMBALS, C_CAMERA})
   :writes({C_MATRICES, C_CAMERA})
   :via(function(state)
      return {
         [C_MATRICES] = {
            [C_CAMERA] = matrix():setHPB(state[C_GIMBALS][C_CAMERA])
         }
      }
   end)
   :during(ACTOR_ON_UPDATE)

actor_relative_camera = system("actor_relative_camera")
   :runs_before(goldenorb_before_apply_state)
   :reads({C_MATRICES, C_ACTOR}, {C_MATRICES, C_CAMERA})
   :writes({C_MATRICES, C_CAMERA})
   :via(function(state)
      return {
         [C_MATRICES] = {
            [C_CAMERA] = matrix():mul(
               state[C_MATRICES][C_ACTOR],
               state[C_MATRICES][C_CAMERA]
            )
         }
      }
   end)
   :during(LEVEL_CALL)

camera_arm = system("camera_arm")
   :runs_after(actor_relative_camera)
   :runs_before(goldenorb_before_apply_state)
   :reads({C_MATRICES, C_ACTOR}, {C_MATRICES, C_CAMERA})
   :writes({C_MATRICES, C_CAMERA})
   :via(function(state)
      return {
         [C_MATRICES] = {
            [C_CAMERA] = matrix():mul(
               matrix():identity():translate(0, 1.656, 0),
               matrix():mul(
                  state[C_MATRICES][C_CAMERA],
                  matrix():identity():translate(0, 0, 0)
               )
            )
         }
      }
   end)
   :during(LEVEL_CALL)

--- Apply custom camera state if a matrix is present
apply_camera_matrix = system("apply_camera_matrix")
   :runs_after(goldenorb_before_apply_state)
   :runs_before(goldenorb_after_apply_state)
   :reads({C_MATRICES, C_CAMERA})
   :writes(C_CAM_FLAG)
   :via(function(state)
      local mat = state[C_MATRICES][C_CAMERA]
      set_cam_custom_position_direction(
         mat.c,
         mat:getHPB(),
         -1,
         true,
         true
      )
      return {
         [C_CAM_FLAG] = true
      }
   end)
   :during(LEVEL_CALL)

--- Reset custom camera state if no matrix is present
reset_camera_matrix = system("reset_camera_matrix")
   :runs_after(goldenorb_before_apply_state)
   :runs_before(goldenorb_after_apply_state)
   :with(C_CAM_FLAG)
   :without({C_MATRICES, C_CAMERA})
   :writes(C_CAM_FLAG)
   :via(function()
      printf("Removing custom camera setting")
      remove_cam_custom_position_direction()
      return {
         [C_CAM_FLAG] = nil
      }
   end)
   :during(LEVEL_CALL)
