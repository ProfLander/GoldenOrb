----------------------------------------------------------------------------
-- GoldenOrb: Free Aim Camera Modifier
----------------------------------------------------------------------------
-- Implemented by Lhan
----------------------------------------------------------------------------

-- Imports

--- Schedule
local LEVEL_CALL = goldenorb_schedule.LEVEL_CALL
local ON_BEFORE_MOUSE_MOVE = goldenorb_schedule.ON_BEFORE_MOUSE_MOVE

--- Main
local goldenorb_before_modify_state = goldenorb_main.goldenorb_before_modify_state
local goldenorb_after_modify_state = goldenorb_main.goldenorb_after_modify_state

--- Camera
local cam_custom = goldenorb_camera_mcm.cam_custom

--- Hands
local get_hands_position = goldenorb_hands_mcm.get_hands_position
local get_hands_rotation = goldenorb_hands_mcm.get_hands_rotation

--- Aim
local aim_type = goldenorb_aim_mcm.aim_type
local AIM_FREE = goldenorb_aim_mcm.AIM_FREE

--- Schedule
local system = goldenorb_schedule.system
local I_READ = goldenorb_schedule.I_READ
local O_WRITE = goldenorb_schedule.O_WRITE

--- Logging
local log = goldenorb_logging.logger(
   "GoldenOrb/Free Aim",
   goldenorb_logging.TRACE
)

-- Implementation

free_aim = system("free_aim")
   :runs_after(goldenorb_before_modify_state)
   :runs_before(goldenorb_after_modify_state)
   :reads("actor", "joint_aim", "spring_aim")
   :writes("cam_custom", "actor_mat")
   :via(function(state)
      if aim_type:get() ~= AIM_FREE then
         return
      end

      --[[
      local ofs = get_hands_rotation():sub(state.joint_aim.vec):mul(-1)
      log("  ofs: %s", ofs)

      local force = state.spring_aim.spring(ofs)
      log("  force: %s", force)

      local joint_aim = state.joint_aim:impulse(force)
      log("  joint_aim: %s", joint_aim)
      --]]

      return {
         actor_mat = matrix():setHPB(
            state.joint_aim.vec.x,
            state.joint_aim.vec.y,
            state.joint_aim.vec.z
         ),
         cam_custom = matrix():mul(
            matrix():identity()
            :translate(
               state.actor:position()
               :add(vector():set(0, 1.656, 0))
            ),
            matrix():setHPB(
               -state.joint_aim.vec.x,
               -state.joint_aim.vec.y,
               -state.joint_aim.vec.z
            )
         )
      }
   end)
   :during(LEVEL_CALL)

handle_mouse = system("handle_mouse")
   :reads("mouse", "joint_aim")
   :outputs({
      mouse = {
         override = O_WRITE
      }
   })
   :when(function()
      return aim_type:get() == AIM_FREE
   end)
   :via(function(state)
      log("on_before_mouse_move: %s", state.mouse)
      local mouse_sens = get_console():get_float("mouse_sens")
      state.joint_aim:impulse(
         vector():set(state.mouse.x, state.mouse.y, 0)
         :mul(mouse_sens)
         :mul(0.02)
      )
      return {
         mouse = {
            override = true
         }
      }
   end)
   :during(ON_BEFORE_MOUSE_MOVE)

function on_game_start()
   RegisterScriptCallback("on_before_mouse_move", on_before_mouse_move)
end
