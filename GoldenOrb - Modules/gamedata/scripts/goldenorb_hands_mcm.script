----------------------------------------------------------------------------
-- GoldenOrb: Hands State
----------------------------------------------------------------------------
-- Implemented by Lhan
----------------------------------------------------------------------------

-- Imports

--- Schedule
local ACTOR_ON_UPDATE = goldenorb_schedule.ACTOR_ON_UPDATE

--- Main
local goldenorb_before_modify_state = goldenorb_main.goldenorb_before_modify_state

--- Weapon
local get_hud_number = goldenorb_weapon.get_hud_number

--- Math
local hpb_to_direction = lander_math.hpb_to_direction

--- Schedule
local system = goldenorb_schedule.system

--- Logging
local log = goldenorb_logging.logger(
   "GoldenOrb/Hands",
   goldenorb_logging.TRACE
)

-- Constants

--- Aim projection distance
local DIST = 1000

-- State

--- Current zoom factor
local zoom_fac = 0

-- Implementation

---@return vector?
function get_hands_position()
   local actor = db.actor
   if not actor then
      log:warning("WARNING: No actor")
      return nil
   end

   return actor:bone_position("bip01", true)
end

---@return vector?
function get_hands_rotation()
   local actor = db.actor
   if not actor then
      log:warning("WARNING: No actor")
      return nil
   end

   return vector():set(actor:bone_direction("bip01", true))
end

---@return vector?
function get_hands_direction()
   local rot = get_hands_rotation()
   return rot and hpb_to_direction(rot)
end

---@return vector
function get_hands_aim_point()
   log:trace("get_hands_aim_point()")
   return get_hands_position()
      :add(
         get_hands_direction()
         :mul(DIST)
      )
end

--- Counteract ADS rotation offset to keep the weapon centered
apply_hud_offset_rot = system("apply_hud_offset_rot")
   :runs_before(goldenorb_before_modify_state)
   :reads("wpn", {"hud", "aim_hud_offset_rot"}, {"matrices", "hud"})
   :writes({"matrices", "hud"})
   :via(function(state)
      local zoom_duration = get_hud_number(state.wpn, "zoom_rotate_time")
      if zoom_duration == nil or
         zoom_duration == 0
      then
         zoom_duration = 0.25
      end
      log:debug("  zoom_duration: %s", zoom_duration)

      -- Apply HUD offset rotation based on zoom state
      local rot_ofs = vector():set(
         state.hud.aim_hud_offset_rot.y,
         state.hud.aim_hud_offset_rot.x,
         state.hud.aim_hud_offset_rot.z
      )

      local dt = (device().time_delta / 1000) / zoom_duration
      log:debug("  dt: %s", dt)
      if not axr_main.weapon_is_zoomed then
         dt = -dt
      end
      zoom_fac = zoom_fac + dt

      zoom_fac = math.min(math.max(zoom_fac, 0), 1)

      log:debug("  zoom_fac: %s", zoom_fac)

      -- Done
      return {
         matrices = {
            hud = matrix():mul(
               state.matrices.hud,
               matrix():setHPB(rot_ofs:mul(-(1 - zoom_fac)))
            )
         }
      }
   end)
   :during(ACTOR_ON_UPDATE)
