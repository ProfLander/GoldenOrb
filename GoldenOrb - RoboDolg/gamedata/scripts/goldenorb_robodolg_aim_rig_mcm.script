----------------------------------------------------------------------------
-- RoboDolg: Weapon IK Rig
----------------------------------------------------------------------------
-- Implemented by Lhan
----------------------------------------------------------------------------

-- Imports

--- Main
local goldenorb_after_apply_state = goldenorb_main.goldenorb_after_apply_state

--- Schedule
local system = goldenorb_schedule.system
local ACTOR_ON_UPDATE = goldenorb_schedule.ACTOR_ON_UPDATE

--- Shapes
local RED = robodolg_shapes.RED
local GREEN = robodolg_shapes.GREEN
local CYAN = robodolg_shapes.CYAN
local YELLOW = robodolg_shapes.YELLOW
local WHITE = robodolg_shapes.WHITE
local draw_line = robodolg_shapes.draw_line
local draw_ngon = robodolg_shapes.draw_ngon

--- Camera
local ui_2d = robodolg_camera.ui_2d

--- RoboDolg
local tree = goldenorb_robodolg_mcm.tree

--- MCM Builder
local ImageWithText = mcm_builder.ImageWithText
local Checkbox = mcm_builder.Checkbox

-- State

local page = tree:pages("aim_rig")

page:settings(ImageWithText.new("aim_rig_title"):text("aim_rig"))

local should_draw = page:settings(
   Checkbox.new("draw_aim_rig"):default(true)
)

-- Implementation

--- Line from actor to its aim point
draw_actor_aim = system("draw_actor_aim")
   :runs_after(goldenorb_after_apply_state)
   :reads({"robodolg_cache", "actor"})
   :when(function()
      return should_draw:get()
   end)
   :via(function(state)
      local actor = state.robodolg_cache.actor
      draw_line(
         actor.pos,
         ui_2d(actor.aim, true)(vector()),
         WHITE
      )
   end)
   :during(ACTOR_ON_UPDATE)

--- Circle around hands origin
draw_hands_origin = system("draw_hands_origin")
   :runs_after(goldenorb_after_apply_state)
   :reads({"robodolg_cache", "hands"})
   :when(function()
      return should_draw:get()
   end)
   :via(function(state)
      draw_ngon(
         0.02,
         8,
         GREEN,
         ui_2d(state.robodolg_cache.hands.pos, true)
      )
   end)
   :during(ACTOR_ON_UPDATE)

--- Line from hands origin to hands aim point
draw_hands_aim = system("draw_hands_aim")
   :runs_after(goldenorb_after_apply_state)
   :reads({"robodolg_cache", "hands"})
   :when(function()
      return should_draw:get()
   end)
   :via(function(state)
      local hands = state.robodolg_cache.hands
      local hands_aim = hands and ui_2d(hands.aim, true)(vector())
      draw_line(
         ui_2d(hands.pos, true)(vector()),
         hands_aim,
         GREEN
      )
   end)
   :during(ACTOR_ON_UPDATE)

--- Line from weapon barrel to weapon aim point
draw_weapon_aim = system("draw_weapon_aim")
   :runs_after(goldenorb_after_apply_state)
   :reads({"robodolg_cache", "weapon"})
   :when(function()
      return should_draw:get()
   end)
   :via(function(state)
      local weapon = state.robodolg_cache.weapon
      draw_line(
         ui_2d(weapon.fire_pos, true)(vector()),
         ui_2d(weapon.aim, true)(vector()),
         RED
      )
   end)
   :during(ACTOR_ON_UPDATE)

--- Line from actor aim point to camera aim point
draw_actor_camera_aim = system("draw_actor_camera_aim")
   :runs_after(goldenorb_after_apply_state)
   :reads(
      {"robodolg_cache", "actor"},
      {"robodolg_cache", "camera"}
   )
   :when(function()
      return should_draw:get()
   end)
   :via(function(state)
      draw_line(
         ui_2d(state.robodolg_cache.actor.aim, true)(vector()),
         ui_2d(state.robodolg_cache.camera.aim, true)(vector()),
         CYAN
      )
   end)
   :during(ACTOR_ON_UPDATE)

--- Line from camera aim point to hands aim point
draw_camera_hands_aim = system("draw_camera_hands_aim")
   :runs_after(goldenorb_after_apply_state)
   :reads(
      {"robodolg_cache", "camera"},
      {"robodolg_cache", "hands"}
   )
   :when(function()
      return should_draw:get()
   end)
   :via(function(state)
      draw_line(
         ui_2d(state.robodolg_cache.camera.aim, true)(vector()),
         ui_2d(state.robodolg_cache.hands.aim, true)(vector()),
         YELLOW
      )
   end)
   :during(ACTOR_ON_UPDATE)

--- Triangle comprised of hands origin, hands aim, and weapon barrel
draw_hands_weapon_aim = system("draw_hands_weapon_aim")
   :runs_after(goldenorb_after_apply_state)
   :reads(
      {"robodolg_cache", "hands"},
      {"robodolg_cache", "weapon"}
   )
   :when(function()
      return should_draw:get()
   end)
   :via(function(state)
      local hands = state.robodolg_cache.hands
      local weapon = state.robodolg_cache.weapon

      local hands_aim = hands and ui_2d(hands.aim, true)(vector())
      local weapon_aim = weapon
         and ui_2d(state.robodolg_cache.weapon.aim, true)(vector())
      local weapon_fire_pos = weapon
         and ui_2d(state.robodolg_cache.weapon.fire_pos, true)(vector())

      draw_line(
         ui_2d(hands.pos, true)(vector()),
         weapon_fire_pos,
         GREEN
      )

      draw_line(
         hands_aim,
         weapon_fire_pos,
         GREEN
      )

      draw_line(
         hands_aim,
         weapon_aim,
         CYAN
      )
   end)
   :during(ACTOR_ON_UPDATE)
