----------------------------------------------------------------------------
-- RoboDolg: Aim Spring
----------------------------------------------------------------------------
-- Implemented by Lhan
----------------------------------------------------------------------------

-- Imports

--- Math
local DEG2RAD = lander_math.DEG2RAD
local TAU = lander_math.TAU

--- String
local parse_vector = goldenorb_string.parse_vector

--- Main
local goldenorb_after_apply_state = goldenorb_main.goldenorb_after_apply_state

--- RoboDolg
local tree = goldenorb_robodolg_mcm.tree

--- Schedule
local system = goldenorb_schedule.system
local ACTOR_ON_UPDATE = goldenorb_schedule.ACTOR_ON_UPDATE

--- Shapes
local draw_line = robodolg_shapes.draw_line

--- Camera
local ui_2d = robodolg_camera.ui_2d

--- MCM Builder
local ImageWithText = mcm_builder.ImageWithText
local Checkbox = mcm_builder.Checkbox

--- Log
local log = robodolg_logging.log

-- State

local page = tree:pages("aim_spring")

page:settings(ImageWithText.new("aim_spring_title"):text("aim_spring"))

local should_draw = page:settings(
   Checkbox.new("draw_aim_spring"):default(true)
)

-- Implementation

draw = system("draw")
   :runs_after(goldenorb_after_apply_state)
   :reads("spring_aim", {"robodolg_cache", "camera"})
   :when(function()
      return should_draw:get()
   end)
   :via(function(state)
      local length = parse_vector(state.spring_aim.length:get()):mul(DEG2RAD)
      log("length: %s", length)

      --[[
      local ty = spring_aim.type:get()
      if ty == SP_LINEAR then
         local a = hpb_to_direction(vector():set(-length.x, length.y, 0))
         local b = hpb_to_direction(vector():set(length.x, length.y, 0))
         local c = hpb_to_direction(vector():set(length.x, -length.y, 0))
         local d = hpb_to_direction(vector():set(-length.x, -length.y, 0))

         draw_line_strip(
            nil,
            compose(billboard, camera_relative)
         )(a, b, c, d, a)
      elseif ty == SP_ANGULAR then
         local d = hpb_to_direction(vector():set(length.x, length.y, 0))
         draw_ngon(
            1,
            32,
            nil,
            compose(
               function(v)
                  return v
                     :mul(d)
                     :add(vector():set(0, 0, 1))
               end,
               billboard,
               camera_relative
            )
         )
      else
         assert(nil, string.format("Unrecognized string type %s", ty))
      end
      --]]

      local cam_aim = state.robodolg_cache.camera.aim
      local acc = nil
      for i=1,32 do
         local t = i / 31
         local x = math.sin(t * TAU)
         local y = math.cos(t * TAU)
         local v = vector():set(
            x * length.x,
            y * length.y,
            length.x * length.y
         )
         if acc then
            draw_line(
               ui_2d(cam_aim, true)(acc),
               ui_2d(cam_aim, true)(v)
            )
         end
         acc = vector():set(v)
      end
   end)
   :during(ACTOR_ON_UPDATE)
