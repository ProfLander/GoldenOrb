----------------------------------------------------------------------------
-- RoboDolg: Crosshair
----------------------------------------------------------------------------
-- Implemented by Lhan
----------------------------------------------------------------------------

-- Imports

--- Aim Point
local get_camera_aim_point = goldenorb_camera_mcm.get_camera_aim_point
local get_camera_rotation = goldenorb_camera_mcm.get_camera_rotation
local get_hands_aim_point = goldenorb_hands_mcm.get_hands_aim_point
local get_hands_rotation = goldenorb_hands_mcm.get_hands_rotation
local get_weapon_aim_point = goldenorb_weapon.get_weapon_aim_point
local get_fire_bone_rotation = goldenorb_weapon.get_fire_bone_rotation

--- Shapes
local RED = robodolg_shapes.RED
local GREEN = robodolg_shapes.GREEN
local BLUE = robodolg_shapes.BLUE
local WHITE = robodolg_shapes.WHITE
local draw_crosshair = robodolg_shapes.draw_crosshair

--- Camera
local ui_2d = robodolg_camera.ui_2d

--- MCM Builder
local ImageWithText = mcm_builder.ImageWithText
local Title = mcm_builder.Title
local Checkbox = mcm_builder.Checkbox
local Trackbar = mcm_builder.Trackbar

--- Robodolg
local tree = goldenorb_robodolg_mcm.tree

--- Schedule
local system = goldenorb_schedule.system
local ACTOR_ON_UPDATE = goldenorb_schedule.ACTOR_ON_UPDATE
local LEVEL_CALL = goldenorb_schedule.LEVEL_CALL

--- Main
local goldenorb_before_build_state = goldenorb_main.goldenorb_before_build_state
local goldenorb_after_build_state = goldenorb_main.goldenorb_after_build_state
local goldenorb_after_apply_state = goldenorb_main.goldenorb_after_apply_state
local goldenorb_after_modify_state = goldenorb_main.goldenorb_after_modify_state

--- Function
local advise_before = goldenorb_function.advise_before
local curry_r = goldenorb_function.curry_r

--- Math
local vector_rotate_z = lander_math.vector_rotate_z

--- Logging
local log = robodolg_logging.log

-- Constants

COLOR_ACTOR = WHITE
COLOR_CAMERA = BLUE
COLOR_HANDS = GREEN
COLOR_WEAPON = RED

-- State

--- MCM Page
local page = tree:pages("crosshair")

--- Page title
page:settings(ImageWithText.new("crosshair_title"):text("crosshair"))

--- Visual section
page:settings(Title.new("visual_title"):text("visual"))
local
   cross_size,
   ring_size,
   ring_segs =
   page:settings(
      Trackbar.new("cross_size")
         :increment(0.01)
         :default(0.03)
         :minmax(0, 1),
      Trackbar.new("ring_size")
         :increment(0.01)
         :default(0.02)
         :minmax(0, 1),
      Trackbar.new("ring_segments")
         :increment(1)
         :default(8)
         :minmax(3, 64)
   )

--- Actor section
page:settings(Title.new("actor_title"):text("actor"))
local draw_actor = page:settings(
   Checkbox.new("draw_actor")
      :default(true)
)

--- Camera section
page:settings(Title.new("camera_title"):text("camera"))
local draw_camera = page:settings(
   Checkbox.new("draw_camera")
      :default(true)
)

--- Hands section
page:settings(Title.new("hands_title"):text("hands"))
local draw_hands, rotate_hands = page:settings(
   Checkbox.new("draw_hands")
      :default(true),
   Checkbox.new("rotate_hands")
      :default(true)
)

--- Weapon section
page:settings(Title.new("weapon_title"):text("weapon"))
local
   draw_weapon,
   rotate_weapon =
   page:settings(
   Checkbox.new("draw_weapon")
         :default(true),
      Checkbox.new("rotate_weapon")
         :default(true)
   )

-- Implementation

function vert(v, cond, r)
   log("vert(%s, %s, %s)", v, cond, r)
   local out = ui_2d(v, true)
   return cond
      and advise_before(out, curry_r(vector_rotate_z, r))
      or out
end

draw = system("draw")
   :maybe_reads(
      {"robodolg_cache", "actor"},
      {"robodolg_cache", "camera"},
      {"robodolg_cache", "hands"},
      {"robodolg_cache", "weapon"}
   )
   :runs_after(goldenorb_after_apply_state)
   :via(function(state)
      local size_cross = cross_size:get()
      local size_ring = ring_size:get()
      local segs_ring = ring_segs:get()

      -- Weapon
      if draw_weapon:get() and state.robodolg_cache.weapon then
         draw_crosshair(
            size_cross,
            size_ring,
            segs_ring,
            COLOR_WEAPON,
            vert(
               state.robodolg_cache.weapon.aim,
               rotate_weapon:get(),
               -(state.robodolg_cache.weapon.rot.z - state.robodolg_cache.camera.rot.z)
            )
         )
      end

      -- Hands
      if draw_hands:get() and state.robodolg_cache.hands then
         draw_crosshair(
            size_cross,
            size_ring,
            segs_ring,
            COLOR_HANDS,
            vert(
               state.robodolg_cache.hands.aim,
               rotate_hands:get(),
               -(state.robodolg_cache.hands.rot.z - state.robodolg_cache.camera.rot.z)
            )
         )
      end

      -- Camera
      if draw_camera:get() and state.robodolg_cache.camera then
         draw_crosshair(
            size_cross,
            size_ring,
            segs_ring,
            COLOR_CAMERA,
            ui_2d(state.robodolg_cache.camera.aim, true)
         )
      end

      -- Actor
      if draw_actor:get() and state.robodolg_cache.actor then
         draw_crosshair(
            size_cross,
            size_ring,
            segs_ring,
            COLOR_ACTOR,
            ui_2d(state.robodolg_cache.actor.aim, true)
         )
      end
   end)
   :during(ACTOR_ON_UPDATE)
