----------------------------------------------------------------------------
-- RoboDolg: Weapon IK Rig
----------------------------------------------------------------------------
-- Implemented by Lhan
----------------------------------------------------------------------------

-- Imports

--- Math
local hpb_to_direction = lander_math.hpb_to_direction

--- Weapon
local get_camera_aim_point = goldenorb_camera_mcm.get_camera_aim_point
local get_hands_position = goldenorb_hands_mcm.get_hands_position
local get_hands_rotation = goldenorb_hands_mcm.get_hands_rotation
local get_hands_aim_point = goldenorb_hands_mcm.get_hands_aim_point
local get_weapon_aim_point = goldenorb_weapon.get_weapon_aim_point
local get_fire_bone_position = goldenorb_weapon.get_fire_bone_position

--- Main
local goldenorb_after_build_state = goldenorb_main.goldenorb_after_build_state
local goldenorb_after_apply_state = goldenorb_main.goldenorb_after_apply_state

--- Schedule
local system = goldenorb_schedule.system
local ACTOR_ON_UPDATE = goldenorb_schedule.ACTOR_ON_UPDATE
local LEVEL_CALL = goldenorb_schedule.LEVEL_CALL

--- Camera
local get_camera_aim_point = goldenorb_camera_mcm.get_camera_aim_point

--- Shapes
local RED = robodolg_shapes.RED
local CYAN = robodolg_shapes.CYAN
local YELLOW = robodolg_shapes.YELLOW
local ui_2d = robodolg_shapes.ui_2d
local draw_line = robodolg_shapes.draw_line
local draw_ngon = robodolg_shapes.draw_ngon

--- RoboDolg
local tree = robodolg_goldenorb_mcm.tree

--- MCM Builder
local ImageWithText = mcm_builder.ImageWithText
local Checkbox = mcm_builder.Checkbox

--- Log
local log = robodolg_logging.log

-- State

local page = tree:pages("aim_rig")

page:settings(ImageWithText.new("aim_rig_title"):text("aim_rig"))

local should_draw = page:settings(
   Checkbox.new("draw_aim_rig"):default(true)
)

-- Implementation

cache_data = {}

cache = system("cache")
   :runs_after(goldenorb_after_build_state)
   :with("actor")
   :reads("wpn")
   :via(function(state)
      cache_data.hands = {
         pos = get_hands_position(),
         aim = get_hands_aim_point(),
         rot = get_hands_rotation(),
      }

      if state.wpn then
         cache_data.weapon = {
            aim = get_weapon_aim_point(state.wpn),
            fire_pos = get_fire_bone_position(state.wpn),
         }
      end
   end)
   :during(ACTOR_ON_UPDATE)

draw = system("draw")
   :runs_after(goldenorb_after_apply_state)
   :with("actor")
   :when(function()
      return should_draw:get()
   end)
   :via(function()
      if cache_data.weapon then
         local hands_aim = ui_2d(cache_data.hands.aim, true)(vector())
         local wpn_aim = ui_2d(cache_data.weapon.aim, true)(vector())
         local fire_pos = ui_2d(cache_data.weapon.fire_pos, true)(vector())

         draw_line(
            get_camera_aim_point(),
            hands_aim,
            CYAN
         )

         draw_line(
            hands_aim,
            wpn_aim,
            YELLOW
         )

         draw_line(
            fire_pos,
            wpn_aim,
            RED
         )
      end

      if cache_data.hands then
         local dir = hpb_to_direction(cache_data.hands.rot)
         draw_ngon(
            0.02,
            8,
            vector():set(0, 1, 0),
            ui_2d(cache_data.hands.pos, true)
         )

         draw_line(
            ui_2d(cache_data.hands.pos, true)(vector()),
            ui_2d(
               vector():set(cache_data.hands.pos)
                  :add(dir:mul(1000)),
               true
            )(vector()),
            vector():set(0, 1, 0)
         )
      end
   end)
   :during(LEVEL_CALL)
