----------------------------------------------------------------------------
-- RoboDolg: Aim Spring
----------------------------------------------------------------------------
-- Implemented by Lhan
----------------------------------------------------------------------------

-- Imports

--- Goldenorb Aim
local spring_type = goldenorb_aim.spring_type
local SP_LINEAR = goldenorb_spring.SP_LINEAR
local SP_ANGULAR = goldenorb_spring.SP_ANGULAR

--- Math
local DEG2RAD = lander_math.DEG2RAD
local hpb_to_direction = lander_math.hpb_to_direction

--- Function
local compose = goldenorb_function.compose

--- String
local parse_vector = goldenorb_string.parse_vector

--- Aim
local spring_limit = goldenorb_aim.spring_limit

--- Shapes
local billboard = robodolg_shapes.billboard
local camera_relative = robodolg_shapes.camera_relative
local draw_line_strip = robodolg_shapes.draw_line_strip
local draw_ngon = robodolg_shapes.draw_ngon

--- RoboDolg
local tree = robodolg_goldenorb_mcm.tree

--- MCM Builder
local ImageWithText = mcm_builder.ImageWithText
local Checkbox = mcm_builder.Checkbox

--- Log
local log = goldenorb_logging.log

-- State

local page = tree:pages("aim_spring")

page:settings(ImageWithText.new("aim_spring_title"):text("aim_spring"))

local should_draw = page:settings(
   Checkbox.new("draw_aim_spring"):default(true)
)

-- Implementation

--- Offset fire point slightly to prevent self-intersection
---@param state state
---@return state
function draw(state)
   log("draw_aim_spring(%s)", state)

   if not should_draw:get() then
       return state
   end

   local limit = parse_vector(spring_limit:get()):mul(DEG2RAD)
   printf("limit: %s", limit)

   local ty = spring_type:get()
   if ty == SP_LINEAR then
      local a = hpb_to_direction(vector():set(-limit.x, limit.y, 0))
      local b = hpb_to_direction(vector():set(limit.x, limit.y, 0))
      local c = hpb_to_direction(vector():set(limit.x, -limit.y, 0))
      local d = hpb_to_direction(vector():set(-limit.x, -limit.y, 0))

      draw_line_strip(
         nil,
         compose(billboard, camera_relative)
      )(a, b, c, d, a)
   elseif ty == SP_ANGULAR then
      local d = hpb_to_direction(vector():set(limit.x, limit.y, 0))
      draw_ngon(
         1,
         32,
         nil,
         compose(
            function(v)
               return v
                  :mul(d)
                  :add(vector():set(0, 0, 1))
            end,
            billboard,
            camera_relative
         )
      )
   else
      assert(nil, string.format("Unrecognized string type %s", ty))
   end

   return state
end

---@return nil
function on_game_start()
   log("robodolg_aim_spring.on_game_start")
   RegisterScriptCallback(
      "robodolg_on_draw",
      draw
   )
end
