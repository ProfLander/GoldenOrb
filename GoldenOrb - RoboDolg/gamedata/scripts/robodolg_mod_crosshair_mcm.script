----------------------------------------------------------------------------
-- RoboDolg: Crosshair
----------------------------------------------------------------------------
-- Implemented by Lhan
----------------------------------------------------------------------------

-- Imports

--- Aim Point
local get_camera_aim_point = goldenorb_camera_mcm.get_camera_aim_point
local get_hands_aim_point = goldenorb_weapon.get_hands_aim_point
local get_hands_rotation = goldenorb_weapon.get_hands_rotation
local get_weapon_aim_point = goldenorb_weapon.get_weapon_aim_point
local get_fire_bone_rotation = goldenorb_weapon.get_fire_bone_rotation

--- Shapes
local RED = robodolg_shapes.RED
local GREEN = robodolg_shapes.GREEN
local BLUE = robodolg_shapes.BLUE
local ui_2d = robodolg_shapes.ui_2d
local draw_crosshair = robodolg_shapes.draw_crosshair

--- MCM Builder
local ImageWithText = mcm_builder.ImageWithText
local Title = mcm_builder.Title
local Checkbox = mcm_builder.Checkbox
local Trackbar = mcm_builder.Trackbar

--- Robodolg
local tree = robodolg_goldenorb_mcm.tree

--- Math
local vector_rotate_z = lander_math.vector_rotate_z

--- Logging
local log = goldenorb_logging.log

-- Constants

COLOR_CAMERA = BLUE
COLOR_HANDS = GREEN
COLOR_WEAPON = RED

-- State

--- MCM Page
local page = tree:pages("crosshair")

--- Page title
page:settings(ImageWithText.new("crosshair_title"):text("crosshair"))

--- Visual section
page:settings(Title.new("visual_title"):text("visual"))
local
   cross_size,
   ring_size,
   ring_segs =
   page:settings(
      Trackbar.new("cross_size")
         :increment(0.01)
         :default(0.03)
         :minmax(0, 1),
      Trackbar.new("ring_size")
         :increment(0.01)
         :default(0.02)
         :minmax(0, 1),
      Trackbar.new("ring_segments")
         :increment(1)
         :default(8)
         :minmax(3, 64)
   )

--- Camera section
page:settings(Title.new("camera_title"):text("camera"))
local draw_camera = page:settings(
   Checkbox.new("draw_camera")
      :default(true)
)

--- Hands section
page:settings(Title.new("hands_title"):text("hands"))
local draw_hands, rotate_hands = page:settings(
   Checkbox.new("draw_hands")
      :default(true),
   Checkbox.new("rotate_hands")
      :default(true)
)

--- Weapon section
page:settings(Title.new("weapon_title"):text("weapon"))
local
   draw_weapon,
   rotate_weapon =
   page:settings(
   Checkbox.new("draw_weapon")
         :default(true),
      Checkbox.new("rotate_weapon")
         :default(true)
   )

-- Implementation

---@param state state
---@return state
function draw(state)
   log("draw_crosshair(%s)", state)

   if not state.wpn then
      return state
   end

   local size_cross = cross_size:get()
   local size_ring = ring_size:get()
   local segs_ring = ring_segs:get()

   -- Camera
   if draw_camera:get() then
      draw_crosshair(
         size_cross,
         size_ring,
         segs_ring,
         COLOR_CAMERA,
         ui_2d(get_camera_aim_point(), true)
      )
   end

   -- Hands
   if draw_hands:get() then
      local hands_vert = rotate_hands:get()
         and function(v)
            return ui_2d(get_hands_aim_point(), true)(
               vector_rotate_z(v, -get_hands_rotation().z)
            )
         end
         or ui_2d(get_hands_aim_point(), true)
      draw_crosshair(
         size_cross,
         size_ring,
         segs_ring,
         COLOR_HANDS,
         hands_vert
      )
   end

   -- Weapon
   if draw_weapon:get() then
      local weapon_vert = rotate_weapon:get()
         and function(v)
            return ui_2d(get_weapon_aim_point(state.wpn), true)(
               vector_rotate_z(v, -get_fire_bone_rotation(state.wpn).z)
            )
         end
         or ui_2d(get_weapon_aim_point(state.wpn), true)
      draw_crosshair(
         size_cross,
         size_ring,
         segs_ring,
         COLOR_WEAPON,
         weapon_vert
      )
   end

   return state
end

-- Entrypoint

---@return nil
function on_game_start()
   log("robodolg_crosshair.on_game_start")
   RegisterScriptCallback(
      "robodolg_on_draw",
      draw
   )
end
