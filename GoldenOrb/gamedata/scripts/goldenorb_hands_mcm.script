----------------------------------------------------------------------------
-- GoldenOrb: Hands State
----------------------------------------------------------------------------
-- Implemented by Lhan
----------------------------------------------------------------------------

-- Imports

--- Main
local phase_build_state = goldenorb_main.phase_build_state
local phase_modify_state = goldenorb_main.phase_modify_state
local handle_error = goldenorb_main.handle_error
local ACTOR_ON_UPDATE = goldenorb_main.ACTOR_ON_UPDATE

--- Impure
local inject_actor = goldenorb_impure.inject_actor

--- Camera
local inject_camera = goldenorb_camera_mcm.inject_camera

--- Weapon
local inject_weapon_hud = goldenorb_weapon.inject_weapon_hud

--- Function
local protected = goldenorb_function.protected

--- Schedule
local I_READ = goldenorb_schedule.I_READ
local O_WRITE = goldenorb_schedule.O_WRITE

--- Logging
local log = goldenorb_logging.logger(
   "GoldenOrb/Hands",
   goldenorb_logging.WARNING
)

--- Consume the HUD hand transforms and store them in the state
---@param state table
---@return table
function consume_hands_transform(state)
   log:trace("consume_hands_transform(%s)", state)

   local pos = state.hud.hands_position
   local rot = state.hud.hands_orientation

   local dev = device()
   return {
      hud = {
         hands_position = vector(),
         hands_orientation = vector(),
      },
      cam = {
         pos = vector()
            :add(dev.cam_right:mul(-pos.x))
            :add(dev.cam_top:mul(-pos.y))
            :add(dev.cam_dir:mul(-pos.z))
      }
   }
end

---@return nil
on_game_start = protected(
   handle_error,
   function()
      ACTOR_ON_UPDATE
         :insert(
            consume_hands_transform,
            {
               phase_build_state,
               inject_actor,
               inject_camera,
               inject_weapon_hud,
            },
            {phase_modify_state},
            {
               hud = {
                  hands_position = I_READ,
                  hands_orientation = I_READ,
               },
            },
            {
               cam = {
                  pos = O_WRITE
               }
            }
         )
   end
)
