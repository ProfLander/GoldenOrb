----------------------------------------------------------------------------
-- GoldenOrb: Logging Utilities
----------------------------------------------------------------------------
-- Implemented by Lhan
----------------------------------------------------------------------------

-- Constants

OFF = 0
ERROR = 1
WARNING = 2
INFO = 3
DEBUG = 4
TRACE = 5

local LEVEL = TRACE

-- Implementation

---@class logger
---@field mod string
---@field level number

--- Logger Metatable
Logger = {}

--- Logger constructor
function logger(mod, level)
   assert(
      type(mod) == "string",
      string.format("Invalid module name: %s", mod)
   )
   assert(
      type(level) == "number",
      string.format("Invalid log level: %s", level)
   )
   return setmetatable(
      { mod = mod, level = level },
      { __index = Logger }
   )
end

---@param s string
---@param ... any
---@return nil
function Logger:log_impl(s, ...)
   printf("%s: " .. s, self.mod, ...)
end

--- If logging is enabled, print the given format string and arguments
---@param level number
---@return fun(self: logger, s: string, ...: any): nil
function make_log(level)
   return function(self, s, ...)
      if self.level >= level and LEVEL >= level then
         return self:log_impl(s, ...)
      end
   end
end

Logger.error = make_log(ERROR)
Logger.warning = make_log(WARNING)
Logger.debug = make_log(DEBUG)
Logger.info = make_log(INFO)
Logger.trace = make_log(TRACE)
