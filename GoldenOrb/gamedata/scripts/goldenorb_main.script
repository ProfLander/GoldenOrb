----------------------------------------------------------------------------
-- GoldenOrb: Main Entrypoint
----------------------------------------------------------------------------
-- Decoupled aiming reticle for Anomaly.
----------------------------------------------------------------------------
-- Implemented by Lhan
----------------------------------------------------------------------------

-- Imports

--- Schedule
local schedule = goldenorb_schedule.schedule
local system = goldenorb_schedule.system

--- Function
local protected = goldenorb_function.protected

--- Logging
local log = goldenorb_logging.logger(
   "GoldenOrb/Main",
   goldenorb_logging.WARNING
)

-- Constants

--- State build barrier
function phase_build_state(...)
   log:info("Phase: Build State")
   return ...
end

--- State modify barrier
function phase_modify_state(...)
   log:info("Phase: Modify State")
   return ...
end

--- State apply barrier
function phase_apply_state(...)
   log:info("Phase: Apply State")
   return ...
end

--- State apply barrier
function phase_done(...)
   log:info("Phase: Done")
   return ...
end


--- Actor update action
ACTOR_ON_UPDATE = schedule("Actor Update")

phase_build_state = system("phase_build_state")
   :via(function()
      log:info("Phase: Build State")
      return {}
   end)
   :during(ACTOR_ON_UPDATE)

phase_modify_state = system("phase_modify_state")
   :runs_after(phase_build_state)
   :via(function()
      log:info("Phase: Modify State")
      return {}
   end)
   :during(ACTOR_ON_UPDATE)

phase_apply_state = system("phase_apply_state")
   :runs_after(phase_modify_state)
   :via(function()
      log:info("Phase: Apply State")
      return {}
   end)
   :during(ACTOR_ON_UPDATE)

phase_done = system("phase_done")
   :runs_after(phase_apply_state)
   :via(function()
      log:info("Phase: Done")
      return {}
   end)
   :during(ACTOR_ON_UPDATE)

-- Implementation

--- Error handler
---@param e string
---@return nil
function handle_error(e, stack)
   local msg = string.format("GoldenOrb: ERROR: %s\n%s", e, stack)
   printf(msg)
   actor_menu.set_msg(1, msg, 10000)
end

--- Entrypoint
---@return nil
on_game_start = protected(
   handle_error,
   function()
      RegisterScriptCallback(
         "actor_on_update",
         function()
            ACTOR_ON_UPDATE:prun(handle_error, {})
         end
      )
   end
)
