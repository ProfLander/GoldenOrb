----------------------------------------------------------------------------
-- GoldenOrb: Free Aim Camera Modifier
----------------------------------------------------------------------------
-- Implemented by Lhan
----------------------------------------------------------------------------

-- Imports

--- HUD offset rotation
local apply_hud_offset_rot = goldenorb_mod_hud_offset_rot.apply_hud_offset_rot

--- Math
local DEG2RAD = lander_math.DEG2RAD

--- String
local parse_vector = goldenorb_string.parse_vector

--- Camera
local get_hands_rotation = goldenorb_weapon.get_hands_rotation

--- Spring
local spring = goldenorb_spring.spring

--- Aim
local page = goldenorb_aim.page
local aim_type = goldenorb_aim.aim_type
local AIM_FREE = goldenorb_aim.AIM_FREE
local joint_aim = goldenorb_aim.joint_aim
local spring_type = goldenorb_aim.spring_type
local spring_strength = goldenorb_aim.spring_strength
local spring_limit = goldenorb_aim.spring_limit

--- MCM Builder
local Line = mcm_builder.Line
local Title = mcm_builder.Title
local Trackbar = mcm_builder.Trackbar

--- Logging
local log = goldenorb_logging.log

-- State

page:settings(
   Line.new(),
   Title.new("free_aim_title"):text("free_aim")
)
local eye_height =
   page:settings(
      Trackbar.new("eye_height")
         :default(1.671)
         :increment(0.001)
         :minmax(1, 2)
   )

-- Implementation

function enabled()
   return aim_type:get() == AIM_FREE
end

function free_aim(state)
   log("free_aim(%s)", state)

   if not enabled() then
      return state
   end

   if not state.actor or not state.wpn then
      return state
   end

   local ty = spring_type:get()
   local limit = parse_vector(spring_limit:get()):mul(DEG2RAD)
   local strength = parse_vector(spring_strength:get())

   joint_aim
      :impulse(
         spring(ty, limit, strength)(get_hands_rotation():sub(joint_aim.vec):mul(-1))
      )

   state.cam.enable = true
   state.cam.affect_hud = false

   state.cam.pos = state.actor:position()
      :add(vector():set(0, eye_height:get(), 0))

   state = joint_aim:apply_camera_rotation(state)

   if state.hud then
      --state.hud.hands_position.z = state.hud.hands_position.z - 0.025
      --state.hud.hands_position.z = state.hud.hands_position.z + 0.1
      --state.hud.hands_orientation.x = state.hud.hands_orientation.x - 0.49
   end

   return state
end

function on_game_start()
   goldenorb_main.ACTOR_ON_UPDATE
      :after(apply_hud_offset_rot, free_aim)
end
