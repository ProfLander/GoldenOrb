----------------------------------------------------------------------------
-- GoldenOrb: Free Aim Camera Modifier
----------------------------------------------------------------------------
-- Implemented by Lhan
----------------------------------------------------------------------------

-- Imports

--- HUD offset rotation
local phase_modify_state = goldenorb_main.phase_modify_state
local phase_apply_state = goldenorb_main.phase_apply_state
local handle_error = goldenorb_main.handle_error

--- Camera
local get_hands_rotation = goldenorb_weapon.get_hands_rotation

--- Spring
local spring = goldenorb_spring.spring

--- Aim
local page = goldenorb_aim.page
local aim_type = goldenorb_aim.aim_type
local AIM_FREE = goldenorb_aim.AIM_FREE
local joint_aim = goldenorb_aim.joint_aim
local spring_aim = goldenorb_aim.spring_aim

--- MCM Builder
local Line = mcm_builder.Line
local Title = mcm_builder.Title
local Trackbar = mcm_builder.Trackbar

--- Function
local protected = goldenorb_function.protected

--- Logging
local log = goldenorb_logging.logger(
   "GoldenOrb/Free Aim",
   goldenorb_logging.TRACE
)

-- State

page:settings(
   Line.new(),
   Title.new("free_aim_title"):text("free_aim")
)
local eye_height =
   page:settings(
      Trackbar.new("eye_height")
         :default(1.671)
         :increment(0.001)
         :minmax(1, 2)
   )

-- Implementation

---@return boolean
function enabled()
   return aim_type:get() == AIM_FREE
end

---@param state state
---@return state
function free_aim(state)
   log:trace("free_aim(%s)", state)

   if not enabled() then
      return state
   end

   if not state.actor or not state.wpn then
      return state
   end

   joint_aim
      :impulse(
         spring_aim.spring(get_hands_rotation():sub(joint_aim.vec):mul(-1))
      )

   state.cam.enable = true
   state.cam.affect_hud = false

   state.cam.pos = state.actor:position()
      :add(vector():set(0, eye_height:get(), 0))

   state = joint_aim:apply_camera_rotation(state)

   if state.hud then
      --state.hud.hands_position.z = state.hud.hands_position.z - 0.025
      --state.hud.hands_position.z = state.hud.hands_position.z + 0.1
      --state.hud.hands_orientation.x = state.hud.hands_orientation.x - 0.49
   end

   return state
end

---@return nil
on_game_start = protected(
   handle_error,
   function()
      goldenorb_main.ACTOR_ON_UPDATE
         :insert(
            {free_aim},
            {phase_modify_state, free_aim, phase_apply_state}
         )
   end
)
