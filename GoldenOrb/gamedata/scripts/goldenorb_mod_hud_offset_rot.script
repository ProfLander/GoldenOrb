----------------------------------------------------------------------------
-- GoldenOrb: Hand Orientation
----------------------------------------------------------------------------
--
-- Controls hand orientation
-- Used for:
-- Resetting config-customized orientation
-- Applying ADS rotation offsets
--
----------------------------------------------------------------------------
-- Implemented by Lhan
----------------------------------------------------------------------------

-- Imports

--- Main
local phase_build_state = goldenorb_main.phase_build_state
local phase_modify_state = goldenorb_main.phase_modify_state
local handle_error = goldenorb_main.handle_error

--- Reset Hands Orientation
local reset_hands_orientation = goldenorb_mod_reset_hands_orientation.reset_hands_orientation

--- Weapon
local get_hud_number = goldenorb_weapon.get_hud_number

--- Math
local deg = lander_math.deg

--- Function
local protected = goldenorb_function.protected

--- Logging
local log = goldenorb_logging.logger(
   "GoldenOrb/HUD Offset Rotation",
   goldenorb_logging.TRACE
)

-- State

local zoom_fac = 0

-- Implementation

--- Apply HUD aim offset rotation with a lerp to account for ADS animation
---@param state state
---@return state
function apply_hud_offset_rot(state)
   log:trace("apply_hud_offset_rot(%s)", state)

   if not state.wpn or not state.hud then
      return state
   end

   local zoom_duration = get_hud_number(state.wpn, "zoom_rotate_time")
   if zoom_duration == nil or
      zoom_duration == 0
   then
      zoom_duration = 0.25
   end
   log:debug("  zoom_duration: %s", zoom_duration)

   -- Apply HUD offset rotation based on zoom state
   local ofs = vector():set(
      deg(state.hud.aim_hud_offset_rot.y),
      deg(state.hud.aim_hud_offset_rot.x),
      deg(state.hud.aim_hud_offset_rot.z)
   )

   local dt = (device().time_delta / 1000) / zoom_duration
   log:debug("  dt: %s", dt)
   if not axr_main.weapon_is_zoomed then
      dt = -dt
   end
   zoom_fac = zoom_fac + dt

   zoom_fac = math.min(math.max(zoom_fac, 0), 1)

   log:debug("  zoom_fac: %s", zoom_fac)

   state.hud.hands_orientation:add(ofs:mul(zoom_fac))

   -- Done
   return state
end

---@return nil
on_game_start = protected(
   handle_error,
   function()
      goldenorb_main.ACTOR_ON_UPDATE
         :insert(
            {apply_hud_offset_rot},
            {
               phase_build_state,
               reset_hands_orientation,
               apply_hud_offset_rot,
               phase_modify_state
            }
         )
   end
)
