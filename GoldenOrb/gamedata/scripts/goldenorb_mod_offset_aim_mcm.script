----------------------------------------------------------------------------
-- GoldenOrb: Offset Aim Camera Modifier
----------------------------------------------------------------------------
-- Implemented by Lhan
----------------------------------------------------------------------------

-- Imports

--- HUD offset rotation
local phase_modify_state = goldenorb_main.phase_modify_state
local phase_apply_state = goldenorb_main.phase_apply_state
local handle_error = goldenorb_main.handle_error

--- Aim
local page = goldenorb_aim.page
local aim_type = goldenorb_aim.aim_type
local AIM_OFFSET = goldenorb_aim.AIM_OFFSET
local joint_aim = goldenorb_aim.joint_aim
local spring_aim = goldenorb_aim.spring_aim

--- Data
local get_camera_delta_rotation = goldenorb_camera_mcm.get_camera_delta_rotation

--- String
local parse_vector = goldenorb_string.parse_vector

--- Function
local protected = goldenorb_function.protected

--- MCM Builder
local Line = mcm_builder.Line
local Title = mcm_builder.Title
local InputField = mcm_builder.InputField

--- Logging
local log = goldenorb_logging.logger(
   "GoldenOrb/Offset Aim",
   goldenorb_logging.TRACE
)

-- State

--- MCM Title
page:settings(
   Line.new(),
   Title.new("offset_aim_title"):text("offset_aim")
)

--- MCM Settings
local sensitivity = page:settings(
   InputField.new("sensitivity")
      :default("1.0,1.0")
)

-- Implementation

---@return nil
function enabled()
   return aim_type:get() == AIM_OFFSET
end

---@param state state
---@return state
function offset_aim(state)
   log:trace("offset_aim(%s)", state)

   if not enabled() then
      return state
   end

   joint_aim
      :impulse(
         get_camera_delta_rotation()
         :mul(parse_vector(sensitivity:get()))
         :mul(vector():set(-1, 1, 1))
      )
      :impulse_with(spring_aim.spring)
      :apply_hud_orientation(state)

   return state
end

---@return nil
on_game_start = protected(
   handle_error,
   function()
      goldenorb_main.ACTOR_ON_UPDATE
         :insert(
            {offset_aim},
            {
               phase_modify_state,
               offset_aim,
               phase_apply_state
            }
         )
   end
)
