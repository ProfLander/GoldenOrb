----------------------------------------------------------------------------
-- GoldenOrb: Spring
----------------------------------------------------------------------------
-- An abstraction over spring forces
----------------------------------------------------------------------------
-- Implemented by Lhan
----------------------------------------------------------------------------

-- Imports

--- Math
local sign = lander_math.sign
local vector_axis_angle = lander_math.vector_axis_angle
local axis_angle_to_euler = lander_math.axis_angle_to_euler

-- Constants

SP_LINEAR = 0
SP_ANGULAR = 1

-- Implementation

function spring_1d(length, strength, f)
   assert(f, "Invalid spring input")
   return -math.max(math.abs(f) - length, 0)
      * sign(f)
      * strength
end

function spring_3d_linear(length, strength)
   return function(vec)
      return vector():set(
         spring_1d(length.x, strength.x, vec.x),
         spring_1d(length.y, strength.y, vec.y),
         spring_1d(length.z, strength.z, vec.z)
      )
   end
end

function spring_3d_angular(length, strength)
   return function(vec)
      local vn = vector():set(vec):normalize()
      local axis, angle = vector_axis_angle(vec, vector():set(0, 0, 1))
      if not axis or not angle then
         printf("invalid rotation")
         return vector()
      end

      local ofs = vn:mul(length):magnitude()
      angle = spring_1d(ofs, 1, angle)

      local euler = axis_angle_to_euler(axis, angle)
      euler.x = -euler.x
      euler.z = -euler.z
      return euler:mul(strength)
   end
end

function spring(ty, length, strength)
   if ty == SP_LINEAR then
      return spring_3d_linear(length, strength)
   elseif ty == SP_ANGULAR then
      return spring_3d_angular(length, strength)
   end

   assert(nil, string.format("Invalid spring type %s", ty))
end
