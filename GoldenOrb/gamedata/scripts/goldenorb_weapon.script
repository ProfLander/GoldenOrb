----------------------------------------------------------------------------
-- GoldenOrb: Weapon Data
----------------------------------------------------------------------------
-- Implemented by Lhan
----------------------------------------------------------------------------

-- Imports

local inject_actor = goldenorb_impure.inject_actor

--- Table
map = goldenorb_table.map
foreach = goldenorb_table.foreach

--- Math
local hpb_to_direction = lander_math.hpb_to_direction

--- Logging
local log = goldenorb_logging.log

-- Constants

--- Aim projection distance
local DIST = 1000

HUD_KEYS = {
   hands_position = {0, 0},
   hands_orientation = {1, 0},
   aim_hud_offset_pos = {0, 1},
   aim_hud_offset_rot = {1, 1},
   gl_hud_offset_pos = {0, 2},
   gl_hud_offset_rot = {1, 2},
   aim_hud_offset_alt_pos = {0, 3},
   aim_hud_offset_alt_rot = {1, 3},
   lowered_hud_offset_pos = {0, 4},
   lowered_hud_offset_rot = {1, 4},
   fire_point = {0, 10},
   fire_point2 = {0, 11},
   fire_direction = {1, 10},
   shell_point = {1, 11},
   custom_ui_pos = {0, 20},
   custom_ui_rot = {1, 20},
   item_position = {0, 12},
   item_orientation = {1, 12},
}

HUD_DEFAULTS = {
   hands_position = vector(),
   hands_orientation = vector(),
   aim_hud_offset_pos = vector(),
   aim_hud_offset_rot = vector(),
   gl_hud_offset_pos = vector(),
   gl_hud_offset_rot = vector(),
   aim_hud_offset_alt_pos = vector(),
   aim_hud_offset_alt_rot = vector(),
   lowered_hud_offset_pos = vector(),
   lowered_hud_offset_rot = vector(),
   fire_point = vector(),
   fire_point2 = vector(),
   fire_direction = vector():set(0, 0, 1),
   shell_point = vector(),
   custom_ui_pos = vector(),
   custom_ui_rot = vector(),
   item_position = vector(),
   item_orientation = vector(),
}

-- Implementation

---@param wpn game_object
---@return string?
function get_hud_sec(wpn)
   ---@type string?
   return wpn and SYS_GetParam(0, wpn:section(), "hud")
end

---@param wpn game_object
---@param key string
---@return string?
function get_hud_string(wpn, key)
   local hud_sec = get_hud_sec(wpn)
   ---@type string?
   return hud_sec and SYS_GetParam(0, hud_sec, key)
end

---@param wpn game_object
---@param key string
---@return number
function get_hud_number(wpn, key)
   --log("get_hud_number(%s, %s)", wpn, key)
   local str = get_hud_string(wpn, key)
   return str and tonumber(str) or 0
end

---@param wpn game_object
---@param key string
---@return vector
function get_hud_vector(wpn, key)
   --log("get_hud_vector(%s)", wpn)
   local val = utils_xml.is_widescreen()
      and get_hud_string(wpn, key .. "_16x9")
      or get_hud_string(wpn, key)

   if val then
      local c = str_explode(val, ",")
      return vector():set(
         tonumber(c[1]) or 0,
         tonumber(c[2]) or 0,
         tonumber(c[3]) or 0
      )
   else
      return HUD_DEFAULTS[key]
   end
end

---@param wpn game_object
---@return state_hud
function get_hud_params(wpn)
   --log("get_hud_params(%s)", wpn)
   return map(
      HUD_KEYS,
      function(k,v)
         if type(v) == "table" then
            return k, get_hud_vector(wpn, k)
         else
            return k, get_hud_number(wpn, k)
         end
      end
   )
end

---@param wpn game_object
---@return string?
function get_fire_bone_name(wpn)
   return get_hud_string(wpn, "fire_bone")
end

---@param wpn game_object
---@param bone number|string
---@return vector
function get_hud_bone_position(wpn, bone)
   return vector():set(wpn:bone_position(bone, true))
end

---@param wpn game_object
---@param bone number|string
---@return vector
function get_hud_bone_direction(wpn, bone)
   return vector():set(wpn:bone_direction(bone, true))
end

---@param wpn game_object
---@return vector
function get_fire_bone_position(wpn)
   local name = get_fire_bone_name(wpn)
   assert(name, "No fire bone name")
   return get_hud_bone_position(wpn, name)
end

---@param wpn game_object
---@return vector?
function get_fire_bone_direction(wpn)
   local name = get_fire_bone_name(wpn)
   return name and hpb_to_direction(get_hud_bone_direction(wpn, name))
end

---@return vector?
function get_hands_position()
   local actor = db.actor
   if not actor then
      log("WARNING: No actor")
      return nil
   end

   return actor:bone_position("bip01", true)
end

---@return vector?
function get_hands_rotation()
   local actor = db.actor
   if not actor then
      log("WARNING: No actor")
      return nil
   end

   return actor:bone_direction("bip01", true)
end

---@return vector?
function get_hands_direction()
   local rot = get_hands_rotation()
   return rot and hpb_to_direction(rot)
end

---@return vector
function get_hands_aim_point()
   log("get_hands_aim_point()")
   return get_hands_position()
      :add(
         get_hands_direction()
         :mul(DIST)
      )
end

--- Weapon aim point getter
---@param wpn game_object
---@return vector
function get_weapon_aim_point(wpn)
   log("get_weapon_aim_point(%s)", wpn)
   return get_fire_bone_position(wpn)
      :add(
         get_fire_bone_direction(wpn)
         :mul(DIST)
      )
end

--- Inject the actor's weapon into the given state
---@param state state
---@return state
function inject_weapon(state)
   log("inject_weapon(%s)", state)

   if not state.actor then
      return state
   end

   state.wpn = state.actor:active_item()

   return state
end

--- HUD param table class
---@class state_hud
---@field hands_position vector
---@field hands_orientation vector
---@field aim_hud_offset_pos vector
---@field aim_hud_offset_rot vector
---@field gl_hud_offset_pos vector
---@field gl_hud_offset_rot vector
---@field aim_hud_offset_alt_pos vector
---@field aim_hud_offset_alt_rot vector
---@field lowered_hud_offset_pos vector
---@field lowered_hud_offset_rot vector
---@field fire_point vector
---@field fire_point2 vector
---@field fire_direction vector
---@field shell_point vector
---@field custom_ui_pos vector
---@field custom_ui_rot vector
---@field item_position vector
---@field item_orientation vector
---@field scope_zoom_factor number
---@field gl_zoom_factor number
---@field scope_zoom_factor_alt number

--- Inject the weapon's HUD parameters into the given state
---@param state state
---@return state
function inject_weapon_hud(state)
   log("inject_weapon_hud(%s)", state)

   if not state.wpn then
      return state
   end

   state.hud = get_hud_params(state.wpn)

   return state
end

-- Implementation

---@param key string
---@param val vector
---@return nil
function set_hud_vector(key, val)
   log("set_hud_vector(%s, %s)", key, val)
   local keys = HUD_KEYS[key]
   log("  keys: %s", keys)
   hud_adjust.set_vector(
      keys[1], keys[2],
      val.x, val.y, val.z
   )
end

---@param key string
---@param val number
---@return nil
function set_hud_number(key, val)
   log("set_hud_number(%s, %s)", key, val)
   hud_adjust.set_value(key, val)
end

---@param key string
---@param value number|vector
---@return nil
function set_hud_value(key, value)
   if type(value) == "number" then
      set_hud_number(key, value)
   elseif type(value) == "userdata" then
      ---@cast value vector
      set_hud_vector(key, value)
   else
      assert(nil, "Invalid HUD data for key %s: %s", key, value)
   end
end

---@param hud state_hud
---@return nil
function set_hud_params(hud)
   foreach(hud, set_hud_value)
end


---@param state state
---@return state
function apply_weapon_hud(state)
   log("apply_weapon_hud(%s)", state)

   if not state.hud then
      return state
   end

   log("  Applying HUD parameters...")
   set_hud_params(state.hud)
   log("  Done.")

   return state
end

---@return nil
function on_game_start()
   goldenorb_main.ACTOR_ON_UPDATE
      :after(inject_actor, inject_weapon)
      :after(inject_weapon, inject_weapon_hud)
end
