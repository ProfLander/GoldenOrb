* GoldenOrb
In-development total camera and aiming overhaul for Anomaly.

Uses modded exe functionality to add or extend composable features affecting the actor, arms, weapon, and camera.

Featurewise, the full mechanical span between immersive realism and arcadey shooter is under consideration; if it involves allowing the player a greater range of expression or reaction with regard to interaction with the game world, then it probably qualifies for inclusion.

Implemented:
- Detached reticle

In Progress:
- Fully-detached free aim
- True bodycam effects

Future:
- Expanded reticle constraint forces
- Physical recoil
- GoldenEye / Perfect Dark style auto aim
- Variable lean and crouch
- Enhanced free look
- Custom camera inertia
- Inverse kinematic weapon positioning
- And myriad other possibilities

** Installation
- Add to a vanilla MO2 preset alongside *Parallax Reflex Sights* and *Shader 3D Scopes*, placing *GoldenOrb* at the bottom.
- Clear shader cache.
- Once in-game, open the console and execute `g_firepos 1` and `g_firepos_zoom 1` to enable muzzle-based hitscan trajectory.
  - If either command fails, your modded exes are out of date.
- To enable debug visualization, set `DRAW` to true in one of the `robodolg_*.script` modules.
- To switch between features, modify the commented lines in `goldenorb_modifiers.script`.
  - The three of primary interest at present are `offset_aim`, `free_aim`, and `body_cam`.

** Known Issues
- Various weapons need their positions updated for correct scoping behaviour
  - Current good test cases:
    - MP5
    - Mk14 EBR
- 3D Shader Scopes has been modified for better accuracy, but deviation from crosshair will occur relative to view angle until eye-relative weapon orientation is implemented
- ADS zoom is not correctly overridden until the second map load.

** Mod Compatibility
*** Fundamental
Will technically function without these, but with reduced functionality.

**** Parallax Reflex Sights
- Necessary for proper sight rendering when off-center

**** Shader 3D Scopes
- Necessary for proper scope rendering when off-center


*** Supported
**** ???

*** Partially Supported
**** Private's Gun Reposition
https://www.moddb.com/mods/stalker-anomaly/addons/privates-gun-reposition-aka-pgr
- Baked-in zoom FOV
- Works nicely when overridden


*** Unsupported
**** Position and View 2.1
https://www.moddb.com/mods/stalker-anomaly/addons/position-and-view-v21-release
- Incompatible by default
  - Overrides 3DSS with 2D scopes
  - Baked-in zoom FOV
  - Incorrect positions (possibly down to uncorrected HUD offsets)

**** EFT Reposition
- Testing required

**** Gunslinger Animations
- Baked-in zoom FOV
  - Need to re-test

*** Incompatible
**** Mods that use ~hud_adjust~
***** Weapon Cover Tilt
***** Alternate Weapon Recoil
- WCT-based, from Anomaly Discord
  - A major inspiration in concert with Parallax Reflex Sights
**** Mods that use ~set_cam_custom_position_rotation~
***** ???


** Features
- [ ] Reimplement recoil via decoupled aim point
  - Can use the consumed values to inform a custom treatment
    - Can add an additional recoil transform to the HUD model and aggregate it from composable property animations (i.e. add one per shot, auto-cleanup finished)
    - Can use physical weapon properties to calculate kick direction and force
      - Account for:
        - Caliber, barrel length, (handle position?) for vertical component
        - Built-in stats as a vague abstraction over weight / power ratio
        - Position relative to shooter's center of mass for horizontal component
  - Alternately, just turn regular recoil back on and let mods handle it
    - Likely possible now aiming is properly integrated with the HUD skeleton
- [ ] Weapon inverse kinematics
  - For aiming around cover in appropriate situations
    - Functionally dependent on accurate ballistics
  - Reticle offset is negligible due to far plane projection, so the gun can move around and roll freely about the barrel without affecting aim
- [ ] Player Inertia
  - Can implement a spring-damper system driven by position delta and use it to drive a camera offset
    - Potential to drive it via the third-person skeleton as an offset
- [ ] Accurate ballistics
  - Currently, bullets still fly from the camera after having their trajectory calculated based on the weapon's muzzle
  - HUD parameter fire point does not affect trajectory; only cosmetic muzzle flash
  - May be possible to reposition bullets before they fire?
    - Can Lua get a bullet reference?
- [ ] Variable Crouch and Lean
  - Can use a System Shock approach and have a 9x9 grid
    - Lean Left / Stand / Lean Right on X axis
    - Stand / Crouch / Prone on Y axis
    - Maintain a point within this space
      - Map lean keys to modify X axis
      - Crouch moves -Y
      - Prone moves +Y
      - Alternately, implement a modifier key to control via mouse?
        - Probably not tractable given that mouse controls aim
      - Mousewheel is viable for Y axis
    - Potential to implement sprint as an extension of the Y axis
      - 'Above standing'
    - Likewise, potential to implement slow-walking in the region between standing and crouching
    - Trigger the appropriate state when the camera enters a given cell
      - Will need to apply partial offsets to prevent the arm animations from going out of sync
- [ ] Variable character speed?
  - Similar to Ready or Not
    - Use mousewheel for granular control over movement speed
  - A proper treatment would involve reimplementing sprint
    - Including animation, which is a lot more tricky
- [ ] Improved Free Look
  - Toggle?
  - Allow gun to follow aim


** Progress
*** Done
- [X] Fix 3DSS distortion when displayed off-center
  - Will likely need to reverse-engineer unless LVutner comes through with info
- [X] Further generalize execution model
  - Standardize around monadic state
    - Don't use an explicit state monad; just pass state and keep it pure
      - Will need to refactor various getter methods to avoid using globals
  - Allows the update callback / modifier distinction to be erased
- [X] Extensible MCM interface
  - [X] Develop workflow for defining MCM tables across scripts
  - [X] Extend MCM Builder primitives to act as lenses into MCM
  - [X] Implement proper subtree support
  - [X] Implement extensible fallback functionality for ~get~
- [X] Investigate adding compositional MCM syntax to the builder
  - If `on_mcm_load` multi-returns table + string values, MCM will add the table to the top-level item with the given name instead of creating a new one
    - Potential for further decoupling, as this allows tree roots to be composed without passing around parent references
  - *NOTE:* Done, implemented as ~collection~ param on ~Tree~
- [X] Generalize cursor restriction into a module interface
  - Free and Offset aim both use their own restriction formulation
    - Need to refactor them to share common code via restrictor module
- [X] Extend cursor restriction
  - Allow box and circle shapes
    - Position + size for flexibility
  - Use a spring to allow for soft edges
    - i.e. A region where camera motion scales up to full 1:1
- [X] Generalize existing 'offset aim' behaviour into an interface module
  - Will be needed so it can share code with an auto-aiming module
- [X] Decouple RoboDolg from GoldenOrb update
  - Needs to update via ~level~ instead of ~actor~ in order to properly synchronize with the camera
  - Whereas GoldenOrb needs to update via ~actor~ in order to properly synchronize with the arms mesh
  - Need to test and see where is optimal to update HUD repositioning
- [X] Object pooling
  - The debug rendering API design suggests its objects are persistent
  - If so, need to implement a pooling system and reuse them instead of allocating new ones every frame

*** To Do
**** Core
- [ ] Promote goldenorb.org to README.org
  - Git should be able to render it inline; double-check other repos
- [ ] Investigate script namespacing for anomaly-definitions plugin
- [ ] Type annotation + doco pass
  - Need to give the LSP as much info as possible
- [ ] Functional primitives pass
  - Need to replace manual maps, filters, etc with abstractions
- [ ] Address MCM Builder / Lander Math symlinks
  - Not ideal for people cloning the repo
- [ ] Formalize dependency graph branch / join points
  - ex. Need singular 'before modifiers' / 'after modifiers' points instead of having to explicitly name everything 
- [ ] Tie module state to character state
  - i.e. Being able to have autoaim while unscoped, detached while scoped, different behaviour based on player state, any and all combinations of the above
  - Ergo, will need a condlist interface since the problem space is way too big for MCM
- [ ] Handle HUD FOV <1
  - Should be possible by scaling positions etc based on the HUD FOV factor, though may involve nasty projection erro 
- [ ] MCM Key Bindings
  - Dedicated look modifier for switching between modesets
- [ ] Formalize module structure
  - Should ideally be separable into sub-mods
    - Core
    - Free Aim
    - Offset Aim
    - Bodycam
    - etc.
    
**** Hands
- [-] Visualize cursor restriction with RoboDolg
  - [X] Implement box drawing for linear spring
  - [ ] Manually billboard rotated vectors for correct sizing
  - [ ] Implement circle drawing for angular spring
  - [ ] Implement rounded box shape
    - Can offset by crosshair size for edge-conforming
  - [ ] Visualize spring strength as well as length and type
    - Can draw a second shape scaled by strength
      - Draw line from edge of base shape
        
- [ ] Fix crossing-pi bug with aim joint
  - Incorrect behaviour after +-180 degrees of rotation
  - Currently measuring angles in world space
    - Need to measure in camera space instead

- [ ] Rotate origin around eye when scoped
  - Necessary to ensure consistent distance and rotation w.r.t camera
    - Guarantees that the reticle aligns with the far-plane barrel projection

- [ ] Fake ADS
  - Ability to have the weapon in ADS pose without the character being in aim mode
    - i.e. Ability to use the sight while walking
    - Can tie to an extra keybind or somesuch, use aimed recoil values
      - Still subject to hip-fire accuracy penalty

**** Weapon
- [ ] Goldeneye-style auto-aim
  - Need to search for visible actors, pick closest / most relevant
    - Can use skeletons to target closest body part
  - Ergo, need an interface that allows such a system to feed crosshair offsets
  - Good test case for the iterate-by-distance function
  - Should be tractable in both fixed and free aim modes by introducing an extra offset transform to the HUD model

- [ ] Automatic 'Lower Weapon' proc at bottom of screen
  - Probably only tractable for free aim mode

- [ ] Aimable knife
  - Regular knife 'fires' from somewhere around the torso bone
  - Needs to hit from the blade in order to take advantage of decoupled aiming
  - Potential for fancy mouse-driven CQC with appropriate rotation control
    - Follow velocity, apply damage based on speed
    - Retain baked-in moves via left / right click
    - Need to investigate whether existing knife behaviour is engine-side

- [ ] Aimable bolts
  - Regular bolt fires relative to the camera rather than the arms
    
**** RoboDolg
Vector debug UI framework.

- [ ] Full RoboDolg HUD?
  - Health
  - Stamina
  - Ammo
  - Reticle
  - Character targeting
    - Name, faction, etc readout
  - Metroid prime visor effect?

**** 3DSS
- [-] Lanczos filter for back image
  - [X] Implement RetroArch lanczos2_sharp as proof-of-concept
  - [X] Implement choice of filter via shader macro
    - Possibility to feed it in via the params struct, but unsure as to how much bandwidth remains unused
  - [X] Implement bicubic sampling
  - [ ] Implement a more permissively-licensed variant of Lanczos so it can be contributed
- [ ] Reify back image projection formula
  - Backwards matrix multiplication + divide by Z instead of W
    - Produces more-correct results
      - Why?
      - May be worth testing with PRS to see if there's any correlation
- [ ] Increased maximum for MCM zoom factor
  - [ ] Work around via ~run_script~
  - [ ] Formalize somehow, monkey patch?
- [ ] Per-scope zoom factors
- [ ] 3DSS Binoculars
**** Parallax Reflex Sights
- [-] Apply the same logic as 3DSS for reticle positioning
  - May result in total compatibility, BaS included
  - [X] Construct transposed rotation matrix to apply skew to reticle
  - [ ] Figure out why position requires a correction factor
