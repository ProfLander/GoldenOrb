----------------------------------------------------------------------------
-- RoboDolg: Shape Functions
----------------------------------------------------------------------------
-- Implemented by Lhan
----------------------------------------------------------------------------

-- Imports

--- List
range = goldenorb_list.range
map = goldenorb_list.map
foreach_list = goldenorb_list.foreach

--- Table
foreach_table = goldenorb_table.foreach

--- Math
local TAU = lander_math.TAU
local vector_lerp = lander_math.vector_lerp
local hpb_to_direction = lander_math.hpb_to_direction

--- Logging
local log = robodolg_logging.log

-- Constants

WHITE = vector():set(1, 1, 1)
RED = vector():set(1, 0, 0)
GREEN = vector():set(0, 1, 0)
BLUE = vector():set(0, 0, 1)
CYAN = vector():set(0, 1, 1)
MAGENTA = vector():set(1, 0, 1)
YELLOW = vector():set(1, 1, 0)

-- State

local next_id = 1
local shapes_pool = {}
---@type table<number, any[]>
local shapes_used = {}

-- Implementation

---@return nil
function reset()
   log("reset()")
   foreach_table(
      shapes_used,
      function(k,used)
         while #used > 0 do
            local shape = table.remove(used, #used)
            shape.visible = false
            table.insert(shapes_pool[k], shape)
         end
      end
   )
end

---@return number
function get_id()
   local id = next_id
   next_id = next_id + 1
   return id
end

---@param ty number
---@return nil
function allocate_shape_storage(ty)
   log("allocate_shape_storage(%s)", ty)

   if not shapes_pool[ty] then
      shapes_pool[ty] = {}
   end

   if not shapes_used[ty] then
      shapes_used[ty] = {}
   end
end

---@param ty number
---@return any
function get_shape(ty)
   log("get_shape(%s)", ty)

   allocate_shape_storage(ty)

   local pool = shapes_pool[ty]
   log("  pool: %s", pool)

   local used = shapes_used[ty]
   log("  used: %s", used)

   local shape = nil
   if #pool > 0 then
      log("  Pooled shape available")
      shape = table.remove(pool, #pool)
   else
      log("  Allocating new shape")
      shape = debug_render.add_object(
         get_id(),
         ty
      )
   end
   log("  shape: %s", shape)
   table.insert(used, shape)
   shape.visible = true
   return shape
end

---@param pos vector
---@param scale? number
---@param color? vector
---@return nil
function draw_sphere(pos, scale, color)
   log("debug_sphere(%s, %s, %s)", pos, scale, color)

   assert(pos, "Invalid position")
   scale = scale or 0.1
   color = color or vector():set(1, 1, 1)

   local sphere = get_shape(DBG_ScriptObject.sphere):cast_dbg_sphere()

   sphere.matrix = matrix():mul(
      matrix():translate(pos),
      matrix():identity():scale(
         scale,
         scale,
         scale
      )
   )
   sphere.color = fcolor():set(
      color.x,
      color.y,
      color.z,
      1
   )
end

---@param pa vector
---@param pb vector
---@param color? vector
function draw_line(pa, pb, color)
   log("draw_line(%s, %s, %s)", pa, pb, color)

   assert(pa, "Invalid line start")
   assert(pa, "Invalid line end")
   color = color or vector():set(1, 1, 1)

   local line = get_shape(DBG_ScriptObject.line):cast_dbg_line()

   line.point_a = pa
   line.point_b = pb
   line.color = fcolor():set(
      color.x,
      color.y,
      color.z,
      1
   )
end

---@param vec vector
---@return vector
function billboard_vector(vec)
   local dev = device()
   return vector()
      :set(dev.cam_right)
      :mul(vec.x)
      :add(
         vector()
         :set(dev.cam_top)
         :mul(vec.y)
      ):add(
         vector()
         :set(dev.cam_dir)
         :mul(vec.z)
      )
end

---@param pos vector
---@param a vector
---@param b vector
---@param color? vector
---@return nil
function draw_billboard_line(pos, a, b, color)
   log("draw_billboard_line(%s, %s, %s)", pos, a, b, color)

   assert(pos, "Invalid position")
   assert(a, "Invalid line start")
   assert(b, "Invalid line end")

   draw_line(
      billboard_vector(a):add(pos),
      billboard_vector(b):add(pos),
      color
   )
end

---@param pos vector
---@param extent vector
---@param color? vector
---@return nil
function draw_billboard_cross(pos, extent, color)
   log("draw_billboard_cross(%s, %s, %s)", pos, extent, color)
   draw_billboard_line(
      pos,
      vector():set(-extent.x, 0, 0),
      vector():set(extent.x, 0, 0),
      color
   )
   draw_billboard_line(
      pos,
      vector():set(0, extent.y, 0),
      vector():set(0, -extent.y, 0),
      color
   )
end

---@param pos vector
---@param rad number
---@param sides number
---@param color? vector
---@return nil
function draw_billboard_ngon(pos, rad, sides, color)
   log("draw_billboard_ngon(%s, %s, %s, %s)", pos, rad, sides, color)
   local last = nil
   map(
      range(1, sides+1),
      function(i)
         local t = i / sides
         local r = t * TAU
         local v = vector():set(math.sin(r), math.cos(r), 0):mul(rad)
         if last then
            draw_billboard_line(pos, last, v, color)
         end
         last = v
      end
   )
end

---@param pos vector
---@param cross_size number
---@param ring_size number
---@param ring_segs number
---@param color? vector
function draw_crosshair(pos, cross_size, ring_size, ring_segs, color)
   -- Cross
   draw_billboard_cross(
      pos,
      vector():set(cross_size, cross_size, 0),
      color
   )

   -- Diamond
   draw_billboard_ngon(
      pos,
      ring_size,
      ring_segs,
      color
   )
end

---@param obj game_object
---@param hud boolean
---@param poly_size number
---@param poly_sides number
---@param line_length number
---@param color? vector
function draw_bones(obj, hud, poly_size, poly_sides, line_length, color)
   log("draw_bones(%s)", obj)
   local bones = obj:list_bones(hud)

   foreach_list(
      range(1, #bones),
      function(i)
         local name = bones[i]
         local pos = obj:bone_position(name, hud)
         draw_billboard_ngon(
            pos,
            poly_size,
            poly_sides,
            color
         )

         local dir = hpb_to_direction(obj:bone_direction(name, hud))

         draw_line(
            pos,
            vector()
            :set(pos)
            :add(
               vector()
               :set(dir)
               :mul(line_length)
            ),
            color
         )
      end
   )
end

---@param f fun(vector): nil
---@param start vector
---@param finish vector
---@param steps number
---@return nil
function draw_arrayed(f, start, finish, steps)
   log("draw_arrayed(%s, %s, %s, %s)", f, start, finish, steps)
   foreach_list(
      range(1, steps),
      function(i)
         f(vector_lerp(start, finish, i / steps))
      end
   )
end
