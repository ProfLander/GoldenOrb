----------------------------------------------------------------------------
-- GoldenOrb: Actor State
----------------------------------------------------------------------------
-- Implemented by Lhan
----------------------------------------------------------------------------

-- Imports

--- Schedule
local system = cl_schedule.system
local ACTOR_ON_UPDATE = cl_schedule.ACTOR_ON_UPDATE
local LEVEL_CALL = cl_schedule.LEVEL_CALL

--- Main
local goldenorb_before_build_state = goldenorb_main.goldenorb_before_build_state
local goldenorb_after_build_state = goldenorb_main.goldenorb_after_build_state
local goldenorb_before_apply_state = goldenorb_main.goldenorb_before_apply_state
local goldenorb_after_apply_state = goldenorb_main.goldenorb_after_apply_state

--- Gimbals
local C_GIMBALS = goldenorb_gimbals.C_GIMBALS

--- Matrices
local C_MATRICES = goldenorb_matrices.C_MATRICES

-- Constants

C_ACTOR = "actor"

-- Implementation

--- Inject the player actor into the state
inject_actor = system("inject_actor")
   :runs_after(goldenorb_before_build_state)
   :runs_before(goldenorb_after_build_state)
   :writes(C_ACTOR)
   :via(function()
      return {
         actor = db.actor
      }
   end)
   :during(LEVEL_CALL)

--- Inject the actor gimbal
inject_actor_gimbal = system("inject_actor_gimbal")
   :runs_after(goldenorb_before_build_state)
   :runs_before(goldenorb_after_build_state)
   :without({C_GIMBALS, C_ACTOR})
   :writes({C_GIMBALS, C_ACTOR})
   :via(function()
      return {
         [C_GIMBALS] = {
            [C_ACTOR] = vector()
         }
      }
   end)
   :during(LEVEL_CALL)

--- Derive the actor matrix from the actor gimbal
derive_actor_matrix = system("derive_actor_matrix")
   :runs_after(inject_actor_gimbal)
   :runs_before(goldenorb_after_build_state)
   :reads(C_ACTOR, {C_GIMBALS, C_ACTOR})
   :writes({C_MATRICES, C_ACTOR})
   :via(function(state)
      return {
         [C_MATRICES] = {
            [C_ACTOR] = matrix():mul(
               matrix():identity():translate(state[C_ACTOR]:position()),
               matrix():setHPB(state[C_GIMBALS][C_ACTOR])
            )
         }
      }
   end)
   :during(LEVEL_CALL)

--- Apply the actor matrix
apply_actor_matrix = system("apply_actor_matrix")
   :runs_after(goldenorb_before_apply_state)
   :runs_before(goldenorb_after_apply_state)
   :reads(C_ACTOR, {C_MATRICES, C_ACTOR}, {C_MATRICES, "camera"})
   :via(function(state)
      local actor_hpb = state[C_MATRICES][C_ACTOR]:getHPB()
      local camera_hpb = state[C_MATRICES]["camera"]:getHPB()
      state[C_ACTOR]:set_actor_direction(
         vector():set(
            actor_hpb.x,
            camera_hpb.y,
            camera_hpb.z
         ):mul(-1)
      )
   end)
   :during(ACTOR_ON_UPDATE)
