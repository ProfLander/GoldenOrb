----------------------------------------------------------------------------
-- GoldenOrb: Actor State
----------------------------------------------------------------------------
-- Implemented by Lhan
----------------------------------------------------------------------------

-- Imports

--- Schedule
local System = cl_schedule.System
local on_level_call = cl_schedule.on_level_call
local actor_on_update = cl_schedule.actor_on_update

--- Main
local gorb_before_build_state = gorb_main.gorb_before_build_state
local gorb_after_build_state = gorb_main.gorb_after_build_state
local gorb_before_apply_state = gorb_main.gorb_before_apply_state
local gorb_after_apply_state = gorb_main.gorb_after_apply_state

--- Actor Components
local C_ACTOR = gorb_actor_comps.C_ACTOR
local C_NOT_ACTOR = gorb_actor_comps.C_NOT_ACTOR

--- Camera Components
local C_CAMERA = gorb_camera_comps.C_CAMERA

--- Gimbals
local inject_gimbals = gorb_gimbals.inject_gimbals

--- Gimbals Components
local C_GIMBALS = gorb_gimbals_comps.C_GIMBALS

--- Matrices
local inject_matrices = gorb_matrices.inject_matrices

--- Matrices Components
local C_MATRICES = gorb_matrices_comps.C_MATRICES

-- Implementation

--- Inject the player actor into the state
inject_actor = System.new("inject_actor")
   :writes(C_ACTOR)
   :via(function()
      return db.actor
   end)

on_level_call:concat(
   gorb_before_build_state ..
   inject_actor ..
   gorb_after_build_state
)

--- Inject the actor gimbal
inject_actor_gimbal = System.new("inject_actor_gimbal")
   :reads(C_GIMBALS .. C_NOT_ACTOR)
   :writes(C_GIMBALS .. C_ACTOR)
   :via(vector)

on_level_call:concat(
   inject_gimbals ..
   inject_actor_gimbal ..
   gorb_after_build_state
)

--- Derive the actor matrix from the actor gimbal
derive_actor_matrix = System.new("derive_actor_matrix")
   :reads(C_ACTOR, C_GIMBALS .. C_ACTOR)
   :writes(C_MATRICES .. C_ACTOR)
   :via(function(actor, actor_gimbal)
      return matrix():mul(
         matrix():identity():translate(actor:position()),
         matrix():setHPB(actor_gimbal)
      )
   end)

on_level_call:concat(
   inject_actor ..
   inject_actor_gimbal ..
   inject_matrices ..
   derive_actor_matrix ..
   gorb_after_build_state
)

--- Apply the actor matrix
apply_actor_matrix = System.new("apply_actor_matrix")
   :reads(
      C_ACTOR,
      C_MATRICES .. C_ACTOR,
      C_MATRICES .. C_CAMERA
   )
   :via(function(actor, mat_actor, mat_cam)
      local actor_hpb = mat_actor:getHPB()
      local camera_hpb = mat_cam:getHPB()
      actor:set_actor_direction(
         vector():set(
            actor_hpb.x,
            camera_hpb.y,
            camera_hpb.z
         ):mul(-1)
      )
   end)

actor_on_update:concat(
   gorb_before_apply_state ..
   apply_actor_matrix ..
   gorb_after_apply_state
)
