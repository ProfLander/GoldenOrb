----------------------------------------------------------------------------
-- GoldenOrb: Actor State
----------------------------------------------------------------------------
-- Implemented by Lhan
----------------------------------------------------------------------------

cl_import(this, {
   cl_system = {"System"},
   cl_schedule = {
      "on_level_call",
      "actor_on_update"
   },
   gorb_main = {
      "gorb_before_build_state",
      "gorb_after_build_state",
      "gorb_before_apply_state",
      "gorb_after_apply_state",
   },
   gorb_actor_comps = {
      "C_ACTOR",
      "C_NOT_ACTOR",
      "C_CROUCH_HEIGHT",
      "C_NOT_CROUCH_HEIGHT",
   },
   gorb_camera_comps = {
      "C_CAMERA"
   },
   gorb_gimbals = {
      "inject_gimbals"
   },
   gorb_gimbals_comps = {
      "C_GIMBALS"
   },
   gorb_matrices = {
      "inject_matrices"
   },
   gorb_matrices_comps = {
      "C_MATRICES"
   },
   gorb_mcm = {"tree"},
   mcm_builder = {
      "Page",
      "ImageWithText",
      "Title",
      "Trackbar",
   }
})

page = tree:pages("actor")

page:settings(
   ImageWithText.new("actor_title")
      :text("actor")
)

pelvis_height, eye_height, eye_depth, eye_strafe = page:settings(
   Trackbar.new("pelvis_height")
      :minmax(0, 1)
      :increment(0.025)
      :default(0.92),
   Trackbar.new("eye_height")
      :minmax(1, 2)
      :increment(0.025)
      :default(1.725),
   Trackbar.new("eye_depth")
      :minmax(-1, 1)
      :increment(0.01)
      :default(0.02),
   Trackbar.new("eye_strafe")
      :minmax(-1, 1)
      :increment(0.01)
      :default(0.1)
)

-- Implementation

--- Inject the player actor into the state
inject_actor = System.new("inject_actor")
   :writes(C_ACTOR)
   :via(function()
      return db.actor
   end)

on_level_call:concat(
   gorb_before_build_state ..
   inject_actor ..
   gorb_after_build_state
)

--- Inject the player actor into the state
inject_crouch_height = System.new("inject_crouch_height")
   :reads(C_NOT_CROUCH_HEIGHT)
   :writes(C_CROUCH_HEIGHT)
   :via(function()
      return 1
   end)

on_level_call:concat(
   gorb_before_build_state ..
   inject_crouch_height ..
   gorb_after_build_state
)

--- Inject the actor gimbal
inject_actor_gimbal = System.new("inject_actor_gimbal")
   :reads(C_GIMBALS .. C_NOT_ACTOR)
   :writes(C_GIMBALS .. C_ACTOR)
   :via(vector)

on_level_call:concat(
   inject_gimbals ..
   inject_actor_gimbal ..
   gorb_after_build_state
)

--- Derive the actor matrix from the actor gimbal
derive_actor_matrix = System.new("derive_actor_matrix")
   :reads(C_ACTOR, C_GIMBALS .. C_ACTOR)
   :writes(C_MATRICES .. C_ACTOR)
   :via(function(actor, actor_gimbal)
      return matrix():mul(
         matrix():identity():translate(actor:position()),
         matrix():setHPB(actor_gimbal)
      )
   end)

on_level_call:concat(
   inject_actor ..
   inject_actor_gimbal ..
   inject_matrices ..
   derive_actor_matrix ..
   gorb_after_build_state
)

--- Apply the actor matrix
apply_actor_matrix = System.new("apply_actor_matrix")
   :reads(
      C_ACTOR,
      C_MATRICES .. C_ACTOR,
      C_MATRICES .. C_CAMERA
   )
   :via(function(actor, mat_actor, mat_cam)
      local actor_hpb = mat_actor:getHPB()
      local camera_hpb = mat_cam:getHPB()
      actor:set_actor_direction(
         vector():set(
            actor_hpb.x,
            camera_hpb.y,
            camera_hpb.z
         ):mul(-1)
      )
   end)

actor_on_update:concat(
   gorb_before_apply_state ..
   apply_actor_matrix ..
   gorb_after_apply_state
)
