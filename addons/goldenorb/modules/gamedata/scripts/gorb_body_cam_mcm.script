----------------------------------------------------------------------------
-- GoldenOrb: Bodycam Camera Modifier
----------------------------------------------------------------------------
-- Implemented by Lhan
----------------------------------------------------------------------------

-- Imports

--- Main
local gorb_before_modify_state = gorb_main.gorb_before_modify_state
local gorb_after_modify_state = gorb_main.gorb_after_modify_state

--- Math
local deg = cl_math.deg

--- List
local map = cl_list.map
local fold = cl_list.fold

--- Table
local foreach = cl_table.foreach

--- Function
local compose = cl_function.compose

--- Schedule
local System = _cl_schedule.System
local Lens = _cl_schedule.Lens
local actor_on_update = _cl_schedule.actor_on_update

--- Camera
local get_camera_aim_point = gorb_camera_mcm.get_camera_aim_point

--- String
local parse_vector = cl_string.parse_vector
local parse_call = cl_string.parse_call
local trim_ws = cl_string.trim_ws

--- Actor Components
local C_ACTOR = gorb_actor_comps.C_ACTOR

--- HUD Components
local C_HUD = gorb_hud_comps.C_HUD
local C_HANDS_ORIENTATION = gorb_hud_comps.C_HANDS_ORIENTATION

--- Enable Components
local C_ENABLE = gorb_enable_comps.C_ENABLE

--- MCM Builder
local ImageWithText = mcm_builder.ImageWithText
local Checkbox = mcm_builder.Checkbox
local InputField = mcm_builder.InputField

--- Logging
local log = cl_logging.logger(
   "GoldenOrb/Bodycam",
   cl_logging.TRACE
)

-- Constants

BONE_ROOT = "root_stalker"

C_BODY_CAM = Lens.where("body_cam", is_boolean)

-- State

page = gorb_mcm.tree:pages("bodycam")

page:settings(ImageWithText.new("body_cam_title"):text("body_cam"))

local enabled, bone_positions, bone_rotations = page:settings(
   Checkbox.new("enabled")
      :default(false),
   InputField.new("position_factors")
      :default([[
         bip01_head(0.33, 0.33, 0.33):
         bip01_neck(0.33, 0.33, 0.33):
         bip01_spine2(0.33, 0.33, 0.33)
      ]]),
   InputField.new("rotation_factors")
      :default([[
         bip01_head(0.25, 0.1, 0.25):
         bip01_neck(0.15, 0.25, 0.25):
         bip01_spine2(0.0, 0.25, 0.25)
      ]])
)

---@param str string
---@return table<string, vector>
function parse_bone_vectors(str)
   printf("parse_bone_vectors(%s)", str)

   local calls = map(
      str_explode(str, ":"),
      compose(
         trim_ws,
         parse_call,
         function(call)
            return {
               call[1],
               parse_vector(call[2])
            }
         end
      )
   )

   return fold(
      calls, {},
      function(a, n)
         a[n[1]] = n[2]
         return a
      end
   )
end

-- Implementation

---@param state table
---@return vector?
function get_actor_rotation(state)
   log:trace("get_actor_rotation")

   log:debug("  actor: %s", state.actor)

   local cam_aim = get_camera_aim_point()
   log:debug("  cam_aim: %s", cam_aim)

   local actor_pos = state.actor:position()
   log:debug("  actor_pos: %s", actor_pos)

   local actor_dir = state.actor:direction()
   log:debug("  actor_dir: %s", actor_dir)

   local actor_aim = vector()
      :set(state.actor:position())
      :add(state.actor:direction():mul(800))
   log:info("  actor_aim: %s", cam_aim)

   local hands_pos = state.hands.position
   log:debug("  hands_pos: %s", hands_pos)

   local cam_loc = cam_aim:sub(hands_pos):normalize()
   log:debug("  cam_loc: %s", cam_loc)

   local actor_loc = actor_aim:sub(hands_pos):normalize()
   log:debug("  actor_loc: %s", actor_loc)

   local pitch = math.sin(cam_loc.y - actor_loc.y)
   log:debug("  pitch: %s", pitch)

   cam_loc.y = 0
   actor_loc.y = 0

   local yaw = math.atan2(
      vector_cross(cam_loc, actor_loc)
      :dotproduct(vector():set(0, 1, 0)),
      cam_loc:dotproduct(actor_loc)
   )
   log:debug("  yaw: %s", yaw)

   return vector():set(yaw, pitch, 0)
end

--[[
inject_enabled = System.new("inject_body_cam_enabled")
   :write(C_ENABLE .. C_BODY_CAM)

body_cam = System.new("body_cam")
   :reads(
      C_ACTOR,
      C_WEAPON,
      C_HUD .. C_HANDS_ORIENTATION
   )
   :writes(
      C_CAMERA .. C_ENABLE,
      C_CAMERA .. C_AFFECT_HUD,
      C_CAMERA .. C_POSITION,
      C_CAMERA .. C_ROTATION
   )
   :when(function()
      return enabled:get()
   end)
   :via(function(state)
      local root_pos = state.actor:bone_position(BONE_ROOT)
      log:debug("root_pos: %s", root_pos)

      local root_rot = state.actor:bone_direction(BONE_ROOT)
      log:debug("root_rot: %s", root_rot)

      local pos = vector()
      local rot = vector()
      local bone_translate = parse_bone_vectors(bone_positions:get())
      foreach(
         bone_translate,
         function(bone, fac)
            pos:add(
               state.actor:bone_position(bone)
               :sub(root_pos)
               :mul(fac)
            )
         end
      )

      local bone_rotate = parse_bone_vectors(bone_rotations:get())
      foreach(
         bone_rotate,
         function(bone, fac)
            rot:add(
               state.actor:bone_direction(bone)
               :sub(root_rot)
               :mul(fac)
            )
         end
      )

      pos:add(root_pos)
      rot:add(root_rot)

      local out = {
         cam = {}
      }

      out.cam.enable = true
      out.cam.affect_hud = true
      out.cam.pos = pos
      out.cam.rot = vector():set(rot.x, rot.y, 0)

      if not state.wpn or not state.hud then
         return out
      end

      local actor_rot = get_actor_rotation(state)
      if not actor_rot then
         return out
      end

      out.hud = {
         hands_orientation = vector():set(
            state.hud.hands_orientation.x - deg(actor_rot.x),
            state.hud.hands_orientation.y - deg(actor_rot.y),
            state.hud.hands_orientation.z
         )
      }

      return out
   end)

actor_on_update:concat(
   gorb_before_modify_state ..
   body_cam ..
   gorb_after_modify_state
)
--]]
