----------------------------------------------------------------------------
-- GoldenOrb: Camera State
----------------------------------------------------------------------------
-- Implemented by Lhan
----------------------------------------------------------------------------

cl_import(this, {
   gorb_mcm = {"tree"},
   gorb_main = {
      "gorb_before_build_state",
      "gorb_after_build_state",
      "gorb_before_modify_state",
      "gorb_after_modify_state",
      "gorb_before_apply_state",
      "gorb_after_apply_state",
   },
   gorb_actor_comps = {"C_ACTOR"},
   gorb_camera_comps = {
      "C_CAMERA",
      "C_NOT_CAMERA",
      "C_CAM_FLAG",
      "C_NOT_CAM_FLAG",
   },
   gorb_gimbals = {"inject_gimbals"},
   gorb_gimbals_comps = {"C_GIMBALS"},
   gorb_matrices = {"inject_matrices"},
   gorb_matrices_comps = {"C_MATRICES"},
   cl_system = {"System"},
   cl_schedule = {"on_level_call", "actor_on_update"},
   level = {
      "set_cam_custom_position_direction",
      "remove_cam_custom_position_direction"
   },
   mcm_builder = {
      "ImageWithText",
      "Trackbar",
   }
})

--- Logging
local log = cl_logging.logger(
   "GoldenOrb/Camera",
    cl_logging.TRACE
)

-- Constants

local DIST = 1000

-- State

local page = tree:pages("camera")

page:settings(
   ImageWithText.new("camera_title"):text("camera")
)

local smoothing = page:settings(
   Trackbar.new("smoothing")
      :default(-1)
      :minmax(-1, 60)
      :increment(1)
)

-- Implementation

--- Rotation getter
---@return vector
function get_camera_position()
   return device().cam_pos
end

---@return vector
function get_camera_direction()
   return device().cam_dir
end

---@return vector
function get_camera_rotation()
   local dir = get_camera_direction()
   return vector():set(
      math.atan2(dir.x, dir.z),
      math.sin(dir.y),
      0
   )
end


--- Aim point getter
---@return vector
function get_camera_aim_point()
   log:trace("get_camera_aim_point()")
   return device().cam_dir
      :mul(DIST)
      :add(device().cam_pos)
end

---@class state_cam
---@field enable boolean
---@field pos vector
---@field rot vector
---@field smoothing number
---@field show_hud boolean
---@field affect_hud boolean

function camera_matrix()
   local dev = device()
   return matrix():set(
      dev.cam_right,
      dev.cam_top,
      dev.cam_dir,
      dev.cam_pos
   )
end

--- Inject the camera gimbal into the state
inject_camera_gimbal = System.new("inject_camera_gimbal")
   :reads(C_GIMBALS .. C_NOT_CAMERA)
   :writes(C_GIMBALS .. C_CAMERA)
   :via(vector)

on_level_call:concat(
   inject_gimbals ..
   inject_camera_gimbal ..
   gorb_after_build_state
)

--- Derive the camera matrix from the camera gimbal
derive_camera_matrix = System.new("derive_camera_matrix")
   :reads(C_GIMBALS .. C_CAMERA)
   :writes(C_MATRICES .. C_CAMERA)
   :via(function(gimbal_camera)
      return matrix():setHPB(gimbal_camera)
   end)

on_level_call:concat(
   inject_camera_gimbal ..
   derive_camera_matrix ..
   gorb_after_build_state
)

actor_relative_camera = System.new("actor_relative_camera")
   :reads(
      C_MATRICES .. C_ACTOR,
      C_MATRICES .. C_CAMERA
   )
   :writes(C_MATRICES .. C_CAMERA)
   :via(function(mat_actor, mat_camera)
      return matrix():mul(mat_actor, mat_camera)
   end)

actor_on_update:concat(
   gorb_before_modify_state ..
   actor_relative_camera ..
   gorb_after_modify_state
)

camera_arm = System.new("camera_arm")
   :reads(C_MATRICES .. C_CAMERA)
   :writes(C_MATRICES .. C_CAMERA)
   :via(function(mat_cam)
      return matrix():mul(
         matrix():identity():translate(0, 1.656, 0),
         matrix():mul(
            mat_cam,
            matrix():identity():translate(0, 0, 0)
         )
      )
   end)

actor_on_update:concat(
   actor_relative_camera ..
   camera_arm ..
   gorb_after_modify_state
)

--- Apply custom camera state if a matrix is present
apply_camera_matrix = System.new("apply_camera_matrix")
   :reads(C_MATRICES .. C_CAMERA)
   :writes(C_CAM_FLAG)
   :via(function(mat_cam)
      set_cam_custom_position_direction(
         mat_cam.c,
         mat_cam:getHPB(),
         -1,
         true,
         true
      )
      return true
   end)

--- Reset custom camera state if no matrix is present
reset_camera_matrix = System.new("reset_camera_matrix")
   :reads(
      C_CAM_FLAG,
      C_MATRICES .. C_NOT_CAMERA
   )
   :writes(C_CAM_FLAG)
   :via(function()
      remove_cam_custom_position_direction()
   end)

actor_on_update:concat(
   gorb_before_apply_state ..
   apply_camera_matrix ..
   reset_camera_matrix ..
   gorb_after_apply_state
)
