----------------------------------------------------------------------------
-- GoldenOrb: Hands State
----------------------------------------------------------------------------
-- Implemented by Lhan
----------------------------------------------------------------------------

-- Imports

--- Schedule
local actor_on_update = cl_schedule.actor_on_update
local actor_on_update_start = cl_schedule.actor_on_update_start

--- Main
local gorb_before_modify_state = gorb_main.gorb_before_modify_state

--- Weapon
local get_hud_number = gorb_weapon.get_hud_number

--- HUD Components
local C_HUD = gorb_hud_comps.C_HUD
local C_AIM_HUD_OFFSET_ROT = gorb_hud_comps.C_AIM_HUD_OFFSET_ROT

--- Weapon Components
local C_WEAPON = gorb_weapon_comps.C_WEAPON

--- Matrices Components
local C_MATRICES = gorb_matrices_comps.C_MATRICES

--- Math
local hpb_to_direction = cl_math.hpb_to_direction

--- Schedule
local System = cl_schedule.System

--- Logging
local log = cl_logging.logger(
   "GoldenOrb/Hands",
   cl_logging.TRACE
)

-- Constants

--- Aim projection distance
local DIST = 1000

-- State

--- Current zoom factor
local zoom_fac = 0

-- Implementation

---@return vector?
function get_hands_position()
   local actor = db.actor
   if not actor then
      log:warning("WARNING: No actor")
      return nil
   end

   return actor:bone_position("bip01", true)
end

---@return vector?
function get_hands_rotation()
   local actor = db.actor
   if not actor then
      log:warning("WARNING: No actor")
      return nil
   end

   return vector():set(actor:bone_direction("bip01", true))
end

---@return vector?
function get_hands_direction()
   local rot = get_hands_rotation()
   return rot and hpb_to_direction(rot)
end

---@return vector
function get_hands_aim_point()
   log:trace("get_hands_aim_point()")
   return get_hands_position()
      :add(
         get_hands_direction()
         :mul(DIST)
      )
end

--- Counteract ADS rotation offset to keep the weapon centered
apply_hud_offset_rot = System.new("apply_hud_offset_rot")
   :reads(
      C_WEAPON,
      C_HUD .. C_AIM_HUD_OFFSET_ROT,
      C_MATRICES .. C_HUD
   )
   :writes(C_MATRICES .. C_HUD)
   :via(function(wpn, aim_hud_offset_rot, mat_hud)
      local zoom_duration = get_hud_number(wpn, "zoom_rotate_time")
      if zoom_duration == nil or
         zoom_duration == 0
      then
         zoom_duration = 0.25
      end
      log:debug("  zoom_duration: %s", zoom_duration)

      -- Apply HUD offset rotation based on zoom state
      local rot_ofs = vector():set(
         aim_hud_offset_rot.y,
         aim_hud_offset_rot.x,
         aim_hud_offset_rot.z
      )

      local dt = (device().time_delta / 1000) / zoom_duration
      log:debug("  dt: %s", dt)
      if not axr_main.weapon_is_zoomed then
         dt = -dt
      end
      zoom_fac = zoom_fac + dt

      zoom_fac = math.min(math.max(zoom_fac, 0), 1)

      log:debug("  zoom_fac: %s", zoom_fac)

      -- Done
      return matrix():mul(
         mat_hud,
         matrix():setHPB(rot_ofs:mul(-(1 - zoom_fac)))
      )
   end)

actor_on_update:concat(
   actor_on_update_start ..
   apply_hud_offset_rot ..
   gorb_before_modify_state
)
