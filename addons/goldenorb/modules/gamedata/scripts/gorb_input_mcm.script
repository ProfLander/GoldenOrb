----------------------------------------------------------------------------
-- GoldenOrb: Input Handling
----------------------------------------------------------------------------
-- Implemented by Lhan
----------------------------------------------------------------------------

-- Imports

--- Schedule
local system = cl_schedule.system
local LEVEL_CALL = cl_schedule.LEVEL_CALL
local ON_BEFORE_MOUSE_MOVE = cl_schedule.ON_BEFORE_MOUSE_MOVE
local ON_KEY_PRESS = cl_schedule.ON_KEY_PRESS

--- Main
local gorb_before_build_state = gorb_main.gorb_before_build_state
local gorb_after_build_state = gorb_main.gorb_after_build_state

--- Gimbal
local C_GIMBALS = gorb_gimbals.C_GIMBALS

--- Actor
local C_ACTOR = gorb_actor.C_ACTOR

--- Camera
local C_CAMERA = gorb_camera_mcm.C_CAMERA

--- Weapon
local C_HUD = gorb_weapon.C_HUD

--- Aim
local aim_type = gorb_aim_mcm.aim_type
local AIM_FREE = gorb_aim_mcm.AIM_FREE

--- GoldenOrb
local tree = gorb_mcm.tree

--- MCM Builder
local KeybindBox = mcm_builder.KeybindBox

--- Logging
local log = cl_logging.logger(
   "GoldenOrb/Input",
   cl_logging.TRACE
)

-- State

local page = tree:pages("input")

local cycle_gimbal = page:settings(
   KeybindBox.new("cycle_gimbal")
      :default(DIK_keys.DIK_SLASH)
)

-- Implementation

C_GIMBAL_TARGET = "gimbal_target"

GT_ACTOR = 0
GT_CAMERA = 1
GT_HUD = 2
GT_MAX = 3

inject_gimbal_target = system("inject_gimbal_target")
   :runs_after(gorb_before_build_state)
   :runs_before(gorb_after_build_state)
   :without(C_GIMBAL_TARGET)
   :writes(C_GIMBAL_TARGET)
   :via(function()
      return {
         [C_GIMBAL_TARGET] = GT_ACTOR
      }
   end)
   :during(LEVEL_CALL)

cycle_gimbal_target = system("cycle_gimbal_target")
   :reads(C_GIMBAL_TARGET, {"keyboard", "key"})
   :maybe_writes(C_GIMBAL_TARGET)
   :via(function(state)
      local key = state.keyboard.key
      log("  key: %s", state.keyboard.key)

      local bind = cycle_gimbal:get()
      log("  bind: %s", bind)
      if key ~= bind then
         return
      end

      local target = state[C_GIMBAL_TARGET]
      target = math.fmod(target + 1, GT_MAX)
      log("  target: %s", target)

      local msg = target == GT_ACTOR and "Actor"
               or target == GT_CAMERA and "Camera"
               or target == GT_HUD and "HUD"


      news_manager.send_tip(
         db.actor,
         "Mouse targeting " .. msg,
         nil,
         nil,
         1000
      )

      return {
         [C_GIMBAL_TARGET] = target
      }
   end)
   :during(ON_KEY_PRESS)

handle_mouse = system("handle_mouse")
   :reads("mouse", C_GIMBALS, C_GIMBAL_TARGET)
   :writes(C_GIMBALS, {"mouse", "override"})
   :when(function()
      return aim_type:get() == AIM_FREE
   end)
   :via(function(state)
      local target = state[C_GIMBAL_TARGET]

      local gimbals = state[C_GIMBALS]
      local mouse_sens = get_console():get_float("mouse_sens")
      local disp = vector():set(-state.mouse.x, -state.mouse.y, 0)
         :mul(mouse_sens)
         :mul(0.02)

      if target == GT_ACTOR then
         gimbals[C_ACTOR] = vector():add(
            state[C_GIMBALS][C_ACTOR],
            vector():set(disp.x, 0, 0)
         )
         gimbals[C_CAMERA] = vector():add(
            state[C_GIMBALS][C_CAMERA],
            vector():set(0, disp.y, disp.z)
         )
      elseif target == GT_CAMERA then
         gimbals[C_CAMERA] = vector():add(state[C_GIMBALS][C_CAMERA], disp)
      elseif target == GT_HUD then
         gimbals[C_HUD] = vector():add(state[C_GIMBALS][C_HUD], disp)
      end

      return {
         [C_GIMBALS] = gimbals,
         mouse = {
            override = true
         }
      }
   end)
   :during(ON_BEFORE_MOUSE_MOVE)
