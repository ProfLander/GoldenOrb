----------------------------------------------------------------------------
-- GoldenOrb: Input Handling
----------------------------------------------------------------------------
-- Implemented by Lhan
----------------------------------------------------------------------------

-- Imports

--- Schedule
local System = cl_schedule.System
local on_level_call = cl_schedule.on_level_call
local on_before_mouse_move = cl_schedule.on_before_mouse_move
local on_before_mouse_move_start = cl_schedule.on_before_mouse_move_start
local on_before_mouse_move_finish = cl_schedule.on_before_mouse_move_finish

local on_key_press = cl_schedule.on_key_press
local on_key_press_start = cl_schedule.on_key_press_start
local on_key_press_finish = cl_schedule.on_key_press_finish

--- Main
local gorb_before_build_state = gorb_main.gorb_before_build_state
local gorb_after_build_state = gorb_main.gorb_after_build_state

--- Input Components
local C_GIMBAL_TARGET = gorb_input_comps.C_GIMBAL_TARGET
local C_MAYBE_GIMBAL_TARGET = gorb_input_comps.C_MAYBE_GIMBAL_TARGET
local C_NOT_GIMBAL_TARGET = gorb_input_comps.C_NOT_GIMBAL_TARGET

local C_KEYBOARD = gorb_input_comps.C_KEYBOARD
local C_KEY = gorb_input_comps.C_KEY

local C_MOUSE = gorb_input_comps.C_MOUSE
local C_OVERRIDE = gorb_input_comps.C_OVERRIDE

--- Gimbal
local C_GIMBALS = gorb_gimbals_comps.C_GIMBALS

--- Actor
local C_ACTOR = gorb_actor_comps.C_ACTOR

--- Camera
local C_CAMERA = gorb_camera_comps.C_CAMERA

--- HUD Components
local C_HUD = gorb_hud_comps.C_HUD

--- GoldenOrb
local tree = gorb_mcm.tree

--- MCM Builder
local KeybindBox = mcm_builder.KeybindBox

--- Logging
local log = cl_logging.logger(
   "GoldenOrb/Input",
   cl_logging.TRACE
)

-- State

local page = tree:pages("input")

local cycle_gimbal = page:settings(
   KeybindBox.new("cycle_gimbal")
      :default(DIK_keys.DIK_SLASH)
)

-- Implementation

GT_ACTOR = 0
GT_CAMERA = 1
GT_HUD = 2
GT_MAX = 3

inject_gimbal_target = System.new("inject_gimbal_target")
   :reads(C_NOT_GIMBAL_TARGET)
   :writes(C_GIMBAL_TARGET)
   :via(function()
      return GT_ACTOR
   end)

on_level_call:concat(
   gorb_before_build_state ..
   inject_gimbal_target ..
   gorb_after_build_state
)

cycle_gimbal_target = System.new("cycle_gimbal_target")
   :reads(
      C_GIMBAL_TARGET,
      C_KEYBOARD .. C_KEY
   )
   :writes(C_MAYBE_GIMBAL_TARGET)
   :via(function(target, key)
      log("  key: %s", key)

      local bind = cycle_gimbal:get()
      log("  bind: %s", bind)
      if key ~= bind then
         return
      end

      target = math.fmod(target + 1, GT_MAX)
      log("  target: %s", target)

      local msg = target == GT_ACTOR and "Actor"
               or target == GT_CAMERA and "Camera"
               or target == GT_HUD and "HUD"


      news_manager.send_tip(
         db.actor,
         "Mouse targeting " .. msg,
         nil,
         nil,
         1000
      )

      return target
   end)

on_key_press:concat(
   on_key_press_start ..
   cycle_gimbal_target ..
   on_key_press_finish
)

handle_mouse = System.new("handle_mouse")
   :reads(
      C_MOUSE,
      C_GIMBALS .. C_ACTOR,
      C_GIMBALS .. C_CAMERA,
      C_GIMBALS .. C_HUD,
      C_GIMBAL_TARGET
   )
   :writes(
      C_GIMBALS .. C_ACTOR,
      C_GIMBALS .. C_CAMERA,
      C_GIMBALS .. C_HUD,
      C_MOUSE .. C_OVERRIDE
   )
   :via(
      function(
         mouse,
         gimbal_actor,
         gimbal_camera,
         gimbal_hud,
         target
      )
         local mouse_sens = get_console():get_float("mouse_sens")
         local disp = vector():set(-mouse.x, -mouse.y, 0)
            :mul(mouse_sens)
            :mul(0.02)

         if target == GT_ACTOR then
            gimbal_actor = vector():add(
               gimbal_actor,
               vector():set(disp.x, 0, 0)
            )
            gimbal_camera = vector():add(
               gimbal_camera,
               vector():set(0, disp.y, disp.z)
            )
         elseif target == GT_CAMERA then
            gimbal_camera = vector():add(gimbal_camera, disp)
         elseif target == GT_HUD then
            gimbal_hud = vector():add(gimbal_hud, disp)
         end

         return gimbal_actor, gimbal_camera, gimbal_hud, true
      end
   )

on_before_mouse_move:concat(
   on_before_mouse_move_start ..
   handle_mouse ..
   on_before_mouse_move_finish
)
