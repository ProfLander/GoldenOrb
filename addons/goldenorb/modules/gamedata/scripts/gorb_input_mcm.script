----------------------------------------------------------------------------
-- GoldenOrb: Input Handling
----------------------------------------------------------------------------
-- Implemented by Lhan
----------------------------------------------------------------------------

cl_import(this, {
   cl_system = {"System"},
   cl_schedule = {
      "on_level_call",
      "on_before_mouse_move",
      "on_key_press",
   },
   gorb_main = {
      "gorb_before_build_state",
      "gorb_after_build_state",
   },
   gorb_input_comps = {
      "C_GIMBAL_TARGET",
      "C_MAYBE_GIMBAL_TARGET",
      "C_NOT_GIMBAL_TARGET",
      "C_KEYBOARD",
      "C_KEY",
      "C_MOUSE",
      "C_OVERRIDE",
   },
   gorb_gimbals_comps = {"C_GIMBALS"},
   gorb_actor_comps = {"C_ACTOR", "C_CROUCH_HEIGHT"},
   gorb_camera_comps = {"C_PELVIS", "C_CAMERA"},
   gorb_hud_comps = {"C_HUD"},
   gorb_mcm = {"tree"},
   mcm_builder = {"KeybindBox"},
})

--- Logging
local log = cl_logging.logger(
   "GoldenOrb/Input",
   cl_logging.TRACE
)

-- State

local page = tree:pages("input")

local cycle_gimbal = page:settings(
   KeybindBox.new("cycle_gimbal")
      :default(DIK_keys.DIK_SLASH)
)

-- Implementation

GT_ACTOR = 0
GT_PELVIS = 1
GT_CAMERA = 2
GT_HUD = 3
GT_MAX = 4

inject_gimbal_target = System.new("inject_gimbal_target")
   :reads(C_NOT_GIMBAL_TARGET)
   :writes(C_GIMBAL_TARGET)
   :via(function()
      return GT_ACTOR
   end)

on_level_call:concat(
   gorb_before_build_state ..
   inject_gimbal_target ..
   gorb_after_build_state
)

cycle_gimbal_target = System.new("cycle_gimbal_target")
   :reads(
      C_GIMBAL_TARGET,
      C_KEYBOARD .. C_KEY
   )
   :writes(C_MAYBE_GIMBAL_TARGET)
   :via(function(target, key)
      log("  key: %s", key)

      local bind = cycle_gimbal:get()
      log("  bind: %s", bind)
      if key ~= bind then
         return
      end

      target = math.fmod(target + 1, GT_MAX)
      log("  target: %s", target)

      local msg = target == GT_ACTOR and "Actor"
               or target == GT_PELVIS and "Pelvis"
               or target == GT_CAMERA and "Camera"
               or target == GT_HUD and "HUD"


      news_manager.send_tip(
         db.actor,
         "Mouse targeting " .. msg,
         nil,
         nil,
         1000
      )

      return target
   end)

on_key_press:concat(
   on_key_press.start ..
   cycle_gimbal_target ..
   on_key_press.finish
)

handle_mouse = System.new("handle_mouse")
   :reads(
      C_MOUSE,
      C_GIMBALS .. C_ACTOR,
      C_GIMBALS .. C_PELVIS,
      C_GIMBALS .. C_CAMERA,
      C_GIMBALS .. C_HUD,
      C_CROUCH_HEIGHT,
      C_GIMBAL_TARGET
   )
   :writes(
      C_GIMBALS .. C_ACTOR,
      C_GIMBALS .. C_PELVIS,
      C_GIMBALS .. C_CAMERA,
      C_GIMBALS .. C_HUD,
      C_CROUCH_HEIGHT,
      C_MOUSE .. C_OVERRIDE
   )
   :via(
      function(
         mouse,
         gimbal_actor,
         gimbal_pelvis,
         gimbal_camera,
         gimbal_hud,
         crouch_height,
         target
      )
         local mouse_sens = get_console():get_float("mouse_sens")
         local disp = vector():set(-mouse.x, -mouse.y, 0)
            :mul(mouse_sens)
            :mul(0.02)

         if target == GT_ACTOR then
            gimbal_actor = vector():add(
               gimbal_actor,
               vector():set(disp.x, 0, 0)
            )
            gimbal_camera = vector():add(
               gimbal_camera,
               vector():set(0, disp.y, disp.z)
            )
         elseif target == GT_PELVIS then
            gimbal_pelvis = vector():add(
               gimbal_pelvis,
               vector():set(0, 0, -disp.x)
            )
            --[[
            gimbal_camera = vector():add(
               gimbal_camera,
               vector():set(0, disp.y, 0)
            )
            --]]
            crouch_height = crouch_height + disp.y
            printf("crouch_height: %s", crouch_height)
         elseif target == GT_CAMERA then
            gimbal_camera = vector():add(gimbal_camera, disp)
         elseif target == GT_HUD then
            gimbal_hud = vector():add(gimbal_hud, disp)
         end

         return
            gimbal_actor,
            gimbal_pelvis,
            gimbal_camera,
            gimbal_hud,
            crouch_height,
            true
      end
   )

on_before_mouse_move:concat(
   on_before_mouse_move.start ..
   handle_mouse ..
   on_before_mouse_move.finish
)
