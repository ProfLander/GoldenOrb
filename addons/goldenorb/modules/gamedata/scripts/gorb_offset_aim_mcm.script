----------------------------------------------------------------------------
-- GoldenOrb: Offset Aim Camera Modifier
----------------------------------------------------------------------------
-- Implemented by Lhan
----------------------------------------------------------------------------

--[[
-- Imports

--- HUD offset rotation
local gorb_before_modify_state = gorb_main.gorb_before_modify_state
local gorb_after_modify_state = gorb_main.gorb_after_modify_state

--- String
local parse_vector = cl_string.parse_vector

--- System
local System = cl_system.System

--- Schedule
local actor_on_update = cl_schedule.actor_on_update

--- MCM Builder
local Line = mcm_builder.Line
local Title = mcm_builder.Title
local InputField = mcm_builder.InputField

--- Math
local PI = cl_math.PI
local RAD2DEG = cl_math.RAD2DEG

--- Logging
local log = cl_logging.logger(
   "GoldenOrb/Offset Aim",
   cl_logging.WARNING
)

-- State

--- MCM Title
page:settings(
   Line.new(),
   Title.new("offset_aim_title"):text("offset_aim")
)

--- MCM Settings
local sensitivity = page:settings(
   InputField.new("sensitivity")
      :default("1.0,1.0")
)

-- Implementation

offset_aim = system("offset_aim")
   :runs_after(gorb_before_modify_state)
   :runs_before(gorb_after_modify_state)
   :reads("joint_aim", "spring_aim", "cam")
   :inputs({
      cam = {
         matrix_delta = I_READ,
      },
      hud = {
         hands_orientation = I_READ,
      }
   })
   :writes("joint_aim")
   :outputs({
      hud = {
         hands_orientation = O_WRITE,
      }
   })
   :via(function(state)
      local delta_rot = state.cam.matrix_delta:getHPB()
      log("  delta_rot: %s", delta_rot)

      local joint_aim = state.joint_aim
         :impulse(
            delta_rot
            :mul(parse_vector(sensitivity:get()))
         )

      joint_aim
         :impulse_with(state.spring_aim.spring)

      return {
         joint_aim = joint_aim,
         hud = {
            hands_orientation = vector():set(state.hud.hands_orientation)
               :add(vector():set(joint_aim.vec):mul(RAD2DEG))
         }
      }
   end)
   :during(ACTOR_ON_UPDATE)
--]]
