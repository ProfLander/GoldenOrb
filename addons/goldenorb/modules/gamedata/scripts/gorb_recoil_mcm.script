----------------------------------------------------------------------------
-- GoldenOrb: Recoil
----------------------------------------------------------------------------
-- Implemented by Lhan
----------------------------------------------------------------------------

cl_import(this, {
   gorb_mcm = {"tree"},
   cl_schedule = {
      "actor_on_update",
      "on_level_call",
      "actor_on_weapon_fired",
      "actor_on_weapon_fired_start",
      "actor_on_weapon_fired_finish",
   },
   gorb_main = {
      "gorb_before_build_state",
      "gorb_after_build_state",
      "gorb_before_modify_state",
      "gorb_after_modify_state",
      "gorb_before_apply_state",
   },
   gorb_weapon = {"inject_weapon"},
   gorb_spring = {
      "mcm_spring",
      "spring_1d",
      "SP_ANGULAR",
   },
   gorb_recoil_comps = {
      "C_RECOIL",
      "C_NOT_RECOIL",
      "C_ACTOR",
      "C_CAMERA",
      "C_HUD",
   },
   gorb_matrices_comps = {"C_MATRICES"},
   gorb_springs_comps = {"C_SPRINGS"},
   gorb_weapon_comps = {"C_WEAPON"},
   cl_lens = {"lens"},
   cl_table = {"foreach"},
   cl_math = {"deg"},
   cl_system = {"System"},
   mcm_builder = {"Title", "Trackbar"}
})

--- Logging
local log = cl_logging.logger(
   "GoldenOrb/Recoil",
   cl_logging.TRACE
)

-- Constants

--- Lenses for interacting with weapon parameters
local lenses = {
   cam_relax_speed = lens(
      "GetCamRelaxSpeed",
      "SetCamRelaxSpeed"
   ),
   cam_dispersion = lens(
      "GetCamDispersion",
      "SetCamDispersion"
   ),
   cam_dispersion_inc = lens(
      "GetCamDispersionInc",
      "SetCamDispersionInc"
   ),
   cam_dispersion_frac = lens(
      "GetCamDispersionFrac",
      "SetCamDispersionFrac"
   ),
   cam_max_angle_vert = lens(
      "GetCamMaxAngleHorz",
      "SetCamMaxAngleHorz"
   ),
   cam_max_angle_horz = lens(
      "GetCamMaxAngleHorz",
      "SetCamMaxAngleHorz"
   ),
   cam_step_angle_horz = lens(
      "GetCamStepAngleHorz",
      "SetCamStepAngleHorz"
   ),
   zoom_cam_relax_speed = lens(
      "GetZoomCamRelaxSpeed",
      "SetZoomCamRelaxSpeed"
   ),
   zoom_cam_dispersion = lens(
      "GetZoomCamDispersion",
      "SetZoomCamDispersion"
   ),
   zoom_cam_dispersion_inc = lens(
      "GetZoomCamDispersionInc",
      "SetZoomCamDispersionInc"
   ),
   zoom_cam_dispersion_frac = lens(
      "GetZoomCamDispersionFrac",
      "SetZoomCamDispersionFrac"
   ),
   zoom_cam_max_angle_vert = lens(
      "GetZoomCamMaxAngleHorz",
      "SetZoomCamMaxAngleHorz"
   ),
   zoom_cam_max_angle_horz = lens(
      "GetCamMaxAngleHorz",
      "SetCamMaxAngleHorz"
   ),
   zoom_cam_step_angle_horz = lens(
      "GetZoomCamStepAngleHorz",
      "SetZoomCamStepAngleHorz"
   ),
}

-- State

local page = tree:pages("recoil")

page:settings(Title.new("title_kick"):text("kick"))

local kick_multiplier, control_strength = page:settings(
   Trackbar.new("kick_multiplier")
      :default(8)
      :minmax(1, 32)
      :increment(1),
   Trackbar.new("control_strength")
      :default(0.05)
      :minmax(0, 1)
      :increment(0.01)
)

--- Recoil multipliers
page:settings(Title.new("title_strength"):text("strength"))

local recoil_actor, recoil_camera, recoil_hud = page:settings(
   Trackbar.new("recoil_actor")
      :default(0.9)
      :minmax(0, 8)
      :increment(0.1),
   Trackbar.new("recoil_camera")
      :default(0.6)
      :minmax(0, 8)
      :increment(0.1),
   Trackbar.new("recoil_hud")
      :default(1)
      :minmax(0, 8)
      :increment(0.1)
)

--- Weapon data cache
local wpn_cache = {}

--- How under-control the weapon is
local control_fac = 0

--- Recoil springs
local spring_actor = mcm_spring(
   page,
   SP_ANGULAR,
   "0,0",
   "0.025,0.025",
   "actor_"
)

local spring_camera = mcm_spring(
   page,
   SP_ANGULAR,
   "0,0",
   "0.1,0.1",
   "camera_"
)

local spring_hud = mcm_spring(
   page,
   SP_ANGULAR,
   "0,0",
   "0.05,0.05",
   "hud_"
)

-- Implementation

inject_recoil_spring = System.new("inject_recoil_spring")
   :reads(C_SPRINGS .. C_NOT_RECOIL)
   :writes(C_SPRINGS .. C_RECOIL)
   :via(function()
      return {
         actor = spring_actor,
         camera = spring_camera,
         hud = spring_hud,
      }
   end)

on_level_call:concat(
   gorb_before_build_state ..
   inject_recoil_spring ..
   gorb_after_build_state
)

--- Inject the recoil matrix into the state
inject_recoil_matrix = System.new("inject_recoil_matrix")
   :reads(C_MATRICES .. C_NOT_RECOIL)
   :writes(C_MATRICES .. C_RECOIL)
   :via(function()
      return {
         actor = matrix():identity(),
         camera = matrix():identity(),
         hud = matrix():identity(),
      }
   end)

on_level_call:concat(
   gorb_before_build_state ..
   inject_recoil_matrix ..
   gorb_after_build_state
)

--- Cache a weapon's HUD data before setting it all to 0
consume_weapon = System.new("consume_weapon")
   :reads(C_WEAPON)
   :via(function(wpn)
      -- Fetch the weapon's section
      local sec = wpn:section()
      log:trace("  section(%s)", sec)

      -- Return with a warning if it's not valid
      if not sec then
         log:warning("  WARNING: Invalid weapon section")
         return
      end

      -- Return if it's already set
      if wpn_cache[sec] then
         log:info("  %s is already cached, returning.", sec)
         return
      end

      -- Fetch existing cache data
      wpn_cache[sec] = {}

      -- Cast our weapon to a CWeapon
      local weapon = wpn:cast_Weapon()

      if not weapon then
         log:warning("  WARNING: Invalid weapon")
         return
      end

      -- Iterate over our parameter lenses
      foreach(
         lenses,
         function(k, l)
            wpn_cache[sec][k] = l:get(weapon)
            l:set(weapon, 0)
         end
      )
   end)

on_level_call:concat(
   inject_weapon ..
   consume_weapon ..
   gorb_after_build_state
)

--- Apply recoil forces on weapon discharge
recoil_weapon = System.new("recoil_weapon")
   :reads(
      C_WEAPON,
      C_MATRICES .. C_RECOIL .. C_ACTOR,
      C_MATRICES .. C_RECOIL .. C_CAMERA,
      C_MATRICES .. C_RECOIL .. C_HUD
   )
   :writes(
      C_MATRICES .. C_RECOIL .. C_ACTOR,
      C_MATRICES .. C_RECOIL .. C_CAMERA,
      C_MATRICES .. C_RECOIL .. C_HUD
   )
   :via(function(wpn, mat_actor, mat_camera, mat_hud)
      control_fac = control_fac + kick_multiplier:get()

      local id = wpn:id()
      log:trace("  id: %s", id)

      local sec = wpn:section()
      log:trace("  sec: %s", sec)

      local cache = wpn_cache[sec]
      if not cache then
         log:info("No cached recoil information")
         return
      end

      -- Fetch weapon recoil stats
      local wpn_disp = nil
      local wpn_frac = nil
      local wpn_inc = nil
      local wpn_max_vert = nil
      local wpn_max_horz = nil
      local wpn_step_horz = nil

      if axr_main.weapon_is_zoomed then
         wpn_disp = cache.zoom_cam_dispersion
         wpn_frac = cache.zoom_cam_dispersion_frac
         wpn_inc = cache.zoom_cam_dispersion_inc
         wpn_max_vert = cache.zoom_cam_max_angle_vert
         wpn_max_horz = cache.zoom_cam_max_angle_horz
         wpn_step_horz = cache.zoom_cam_step_angle_horz
      else
         wpn_disp = cache.cam_dispersion
         wpn_frac = cache.cam_dispersion_frac
         wpn_inc = cache.cam_dispersion_inc
         wpn_max_vert = cache.cam_max_angle_vert
         wpn_max_horz = cache.cam_max_angle_horz
         wpn_step_horz = cache.cam_step_angle_horz
      end

      -- Gather ammo box list
      local ammo_list_n = utils_item.get_ammo(sec, id)

      -- Gather weapon info
      local ammo_type = wpn:get_ammo_type()
      local ammo_sec = ammo_list_n[ammo_type + 1]
      ---@diagnostic disable-next-line: undefined-field
      local ammo_disp = ini_sys:r_float_ex(ammo_sec, "k_cam_disp") or 1

      -- Fetch silencer recoil stats
      ---@diagnostic disable-next-line: undefined-field
      local silencer = ini_sys:r_string_ex(sec, "silencer_name")
      log:trace("  silencer: %s", silencer)

      local silencer_disp = silencer
         ---@diagnostic disable-next-line: undefined-field
         and ini_sys:r_string_ex(silencer, "cam_dispersion_k") or 1
      local silencer_inc = silencer
         ---@diagnostic disable-next-line: undefined-field
         and ini_sys:r_string_ex(silencer, "cam_dispersion_inc_k") or 1

      log:trace("  silencer_disp: %s", silencer_disp)
      log:trace("  silencer_inc: %s", silencer_inc)

      local disp = wpn_disp * silencer_disp * ammo_disp
      local inc = wpn_inc * silencer_inc * (control_fac + 1)

      local ang = disp + inc

      local rnd = (math.random() - 1) * 2
      local recoil_y = ang * (wpn_frac + rnd * (1 - wpn_frac))
      log("  recoil_y: %s", recoil_y)

      local hpb = mat_hud:getHPB()

      rnd = (math.random() - 1) * 2
      local recoil_x = ((hpb.y + recoil_y) / wpn_max_vert) * rnd * wpn_step_horz
      log("  recoil_x: %s", recoil_x)

      local actor_recoil = recoil_actor:get()
      local camera_recoil = recoil_camera:get()
      local hud_recoil = recoil_hud:get()

      return
         matrix():mul(mat_actor,
            matrix():setHPB(
               recoil_x * actor_recoil,
               0,
               0
            )
         ),
         matrix():mul(
            mat_camera,
            matrix():setHPB(
               recoil_x * actor_recoil + recoil_x * camera_recoil,
               recoil_y * camera_recoil,
               0
            )
         ),
         matrix():mul(
         mat_hud,
            matrix():setHPB(
               recoil_x * hud_recoil,
               recoil_y * hud_recoil,
               0
            )
         )
   end)

actor_on_weapon_fired:concat(
   actor_on_weapon_fired_start ..
   recoil_weapon ..
   actor_on_weapon_fired_finish
)

--- Integrate recoil forces
integrate_recoil = System.new("integrate_recoil")
   :reads(
      C_SPRINGS .. C_RECOIL .. C_ACTOR,
      C_SPRINGS .. C_RECOIL .. C_CAMERA,
      C_SPRINGS .. C_RECOIL .. C_HUD,
      C_MATRICES .. C_RECOIL .. C_ACTOR,
      C_MATRICES .. C_RECOIL .. C_CAMERA,
      C_MATRICES .. C_RECOIL .. C_HUD
   )
   :writes(
      C_MATRICES .. C_RECOIL .. C_ACTOR,
      C_MATRICES .. C_RECOIL .. C_CAMERA,
      C_MATRICES .. C_RECOIL .. C_HUD
   )
   :via(function(
      spring_actor, spring_camera, spring_hud,
      mat_actor, mat_camera, mat_hud
   )
      control_fac = control_fac + spring_1d(
         0,
         control_strength:get(),
         control_fac
      )
      log:trace("  control_fac: %s", control_fac)

      return 
         matrix():mul(
            mat_actor,
            matrix():setHPB(
               spring_actor.spring(
                  mat_actor:getHPB()
               )
            )
         ),
         matrix():mul(
            mat_camera,
            matrix():setHPB(
               spring_camera.spring(
                  mat_camera:getHPB()
               )
            )
         ),
         matrix():mul(
            mat_hud,
            matrix():setHPB(
               spring_hud.spring(
                  mat_hud:getHPB()
               )
            )
         )
   end)

--- Apply recoil forces to the actor matrix
apply_actor_recoil = System.new("apply_actor_recoil")
   :reads(
      C_MATRICES .. C_ACTOR,
      C_MATRICES .. C_RECOIL .. C_ACTOR
   )
   :writes(C_MATRICES .. C_ACTOR)
   :via(function(mat_actor, mat_recoil)
      return matrix():mul(mat_actor, mat_recoil)
   end)

--- Apply recoil forces to the camera matrix
apply_camera_recoil = System.new("apply_camera_recoil")
   :reads(
      C_MATRICES .. C_CAMERA,
      C_MATRICES .. C_RECOIL .. C_CAMERA
   )
   :writes(C_MATRICES .. C_CAMERA)
   :via(function(mat_camera, mat_recoil)
      return matrix():mul(mat_camera, mat_recoil)
   end)

--- Apply recoil forces to the HUD matrix
apply_hud_recoil = System.new("apply_hud_recoil")
   :reads(
      C_MATRICES .. C_HUD,
      C_MATRICES .. C_RECOIL .. C_HUD
   )
   :writes(
      C_MATRICES .. C_HUD
   )
   :via(function(mat_hud, mat_recoil)
      return matrix():mul(mat_hud, mat_recoil)
   end)

actor_on_update:concat(
   gorb_after_modify_state ..
   integrate_recoil ..
   apply_actor_recoil ..
   apply_camera_recoil ..
   apply_hud_recoil ..
   gorb_before_apply_state
)
