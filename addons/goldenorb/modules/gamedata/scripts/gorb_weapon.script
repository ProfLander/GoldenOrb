----------------------------------------------------------------------------
-- GoldenOrb: Weapon Data
----------------------------------------------------------------------------
-- Implemented by Lhan
----------------------------------------------------------------------------

-- Imports

--- Scheudle
local actor_on_update = _cl_schedule.actor_on_update
local on_level_call = _cl_schedule.on_level_call

--- Main
local gorb_before_build_state = gorb_main.gorb_before_build_state
local gorb_after_build_state = gorb_main.gorb_after_build_state
local gorb_before_apply_state = gorb_main.gorb_before_apply_state
local gorb_after_apply_state = gorb_main.gorb_after_apply_state


--- HUD Components
local C_HUD = gorb_hud_comps.C_HUD
local C_NOT_HUD = gorb_hud_comps.C_NOT_HUD

--- Actor Components
local C_ACTOR = gorb_actor_comps.C_ACTOR

--- Weapon Components
local C_WEAPON = gorb_weapon_comps.C_WEAPON

--- Gimbals
local inject_gimbals = gorb_gimbals.inject_gimbals

--- Matrices
local inject_matrices = gorb_matrices.inject_matrices

--- Gimbals Components
local C_GIMBALS = gorb_gimbals_comps.C_GIMBALS

--- Matrices
local C_MATRICES = gorb_matrices_comps.C_MATRICES

--- Math
local RAD2DEG = cl_math.RAD2DEG
local DEG2RAD = cl_math.DEG2RAD

--- Actor
local inject_actor = gorb_actor.inject_actor

--- Table
local map = cl_table.map
local foreach = cl_table.foreach

--- Math
local hpb_to_direction = cl_math.hpb_to_direction

--- Schedule
local System = _cl_schedule.System

--- HUD Components
local C_HANDS_POSITION = gorb_hud_comps.C_HANDS_POSITION
local C_HANDS_ORIENTATION = gorb_hud_comps.C_HANDS_ORIENTATION

--- Logging
local log = cl_logging.logger(
   "GoldenOrb/Weapon",
   cl_logging.TRACE
)

-- Constants

--- Aim projection distance
local DIST = 1000

--- HUD param access keys
HUD_KEYS = {
   hands_position = {0, 0},
   hands_orientation = {1, 0},
   aim_hud_offset_pos = {0, 1},
   aim_hud_offset_rot = {1, 1},
   gl_hud_offset_pos = {0, 2},
   gl_hud_offset_rot = {1, 2},
   aim_hud_offset_alt_pos = {0, 3},
   aim_hud_offset_alt_rot = {1, 3},
   lowered_hud_offset_pos = {0, 4},
   lowered_hud_offset_rot = {1, 4},
   fire_point = {0, 10},
   fire_point2 = {0, 11},
   fire_direction = {1, 10},
   shell_point = {1, 11},
   custom_ui_pos = {0, 20},
   custom_ui_rot = {1, 20},
   item_position = {0, 12},
   item_orientation = {1, 12},
}

--- HUD param defaults
HUD_DEFAULTS = {
   hands_position = vector(),
   hands_orientation = vector(),
   aim_hud_offset_pos = vector(),
   aim_hud_offset_rot = vector(),
   gl_hud_offset_pos = vector(),
   gl_hud_offset_rot = vector(),
   aim_hud_offset_alt_pos = vector(),
   aim_hud_offset_alt_rot = vector(),
   lowered_hud_offset_pos = vector(),
   lowered_hud_offset_rot = vector(),
   fire_point = vector(),
   fire_point2 = vector(),
   fire_direction = vector():set(0, 0, 1),
   shell_point = vector(),
   custom_ui_pos = vector(),
   custom_ui_rot = vector(),
   item_position = vector(),
   item_orientation = vector(),
}

--- HUD param table class
---@class state_hud
---@field hands_position vector
---@field hands_orientation vector
---@field aim_hud_offset_pos vector
---@field aim_hud_offset_rot vector
---@field gl_hud_offset_pos vector
---@field gl_hud_offset_rot vector
---@field aim_hud_offset_alt_pos vector
---@field aim_hud_offset_alt_rot vector
---@field lowered_hud_offset_pos vector
---@field lowered_hud_offset_rot vector
---@field fire_point vector
---@field fire_point2 vector
---@field fire_direction vector
---@field shell_point vector
---@field custom_ui_pos vector
---@field custom_ui_rot vector
---@field item_position vector
---@field item_orientation vector
---@field scope_zoom_factor number
---@field gl_zoom_factor number
---@field scope_zoom_factor_alt number

-- Implementation

---@param wpn game_object
---@return string?
function get_hud_sec(wpn)
   ---@type string?
   return wpn and SYS_GetParam(0, wpn:section(), "hud")
end

---@param wpn game_object
---@param key string
---@return string?
function get_hud_string(wpn, key)
   local hud_sec = get_hud_sec(wpn)
   ---@type string?
   return hud_sec and SYS_GetParam(0, hud_sec, key)
end

---@param wpn game_object
---@param key string
---@return number
function get_hud_number(wpn, key)
   --log:trace("get_hud_number(%s, %s)", wpn, key)
   local str = get_hud_string(wpn, key)
   return str and tonumber(str) or 0
end

---@param wpn game_object
---@param key string
---@return vector
function get_hud_vector(wpn, key)
   log:trace("get_hud_vector(%s)", wpn)
   local val = utils_xml.is_widescreen()
      and get_hud_string(wpn, key .. "_16x9")
      or get_hud_string(wpn, key)

   if val then
      local c = str_explode(val, ",")
      return vector():set(
         tonumber(c[1]) or 0,
         tonumber(c[2]) or 0,
         tonumber(c[3]) or 0
      )
   else
      return HUD_DEFAULTS[key]
   end
end

---@param wpn game_object
---@return state_hud
function get_hud_params(wpn)
   log:trace("get_hud_params(%s)", wpn)
   return map(
      HUD_KEYS,
      function(k,v)
         if type(v) == "table" then
            return k, get_hud_vector(wpn, k)
         else
            return k, get_hud_number(wpn, k)
         end
      end
   )
end

---@param wpn game_object
---@param bone number|string
---@return vector
function get_hud_bone_position(wpn, bone)
   return vector():set(wpn:bone_position(bone, true))
end

---@param wpn game_object
---@param bone number|string
---@return vector
function get_hud_bone_direction(wpn, bone)
   return vector():set(wpn:bone_direction(bone, true))
end

---@param wpn game_object
---@return string?
function get_fire_bone_name(wpn)
   return get_hud_string(wpn, "fire_bone")
end

---@param wpn game_object
---@return vector
function get_fire_bone_position(wpn)
   local name = get_fire_bone_name(wpn)
   assert(name, "No fire bone name")
   return get_hud_bone_position(wpn, name)
end

---@param wpn game_object
---@return vector?
function get_fire_bone_rotation(wpn)
   local name = get_fire_bone_name(wpn)
   return name and get_hud_bone_direction(wpn, name)
end

---@param wpn game_object
---@return vector?
function get_fire_bone_direction(wpn)
   local rot = get_fire_bone_rotation(wpn)
   return rot and hpb_to_direction(rot)
end

--- Weapon aim point getter
---@param wpn game_object
---@return vector
function get_weapon_aim_point(wpn)
   log:trace("get_weapon_aim_point(%s)", wpn)
   return get_fire_bone_position(wpn)
      :add(
         get_fire_bone_direction(wpn)
         :mul(DIST)
      )
end


---@param key string
---@param val vector
---@return nil
function set_hud_vector(key, val)
   log:trace("set_hud_vector(%s, %s)", key, val)
   local keys = HUD_KEYS[key]
   log:trace("  keys: %s", keys)
   hud_adjust.set_vector(
      keys[1], keys[2],
      val.x, val.y, val.z
   )
end

---@param key string
---@param val number
---@return nil
function set_hud_number(key, val)
   log:trace("set_hud_number(%s, %s)", key, val)
   hud_adjust.set_value(key, val)
end

---@param key string
---@param value number|vector
---@return nil
function set_hud_value(key, value)
   if type(value) == "number" then
      set_hud_number(key, value)
   elseif type(value) == "userdata" then
      ---@cast value vector
      set_hud_vector(key, value)
   else
      assert(nil, string.format("Invalid HUD data for key %s: %s", key, value))
   end
end

---@param hud state_hud
---@return nil
function set_hud_params(hud)
   foreach(hud, set_hud_value)
end

--- Inject the actor's active weapon into the state
inject_weapon = System.new("inject_weapon")
   :reads(C_ACTOR)
   :writes(C_WEAPON)
   :via(function(actor)
      return actor:active_item()
   end)

on_level_call:concat(
   inject_actor ..
   inject_weapon ..
   gorb_after_build_state
)


--- Inject the weapon's HUD parameters into the state
inject_hud = System.new("inject_hud")
   :reads(C_WEAPON)
   :writes(C_HUD)
   :via(function(wpn)
      local params = get_hud_params(wpn)
      return params
   end)

on_level_call:concat(
   inject_weapon ..
   inject_hud ..
   gorb_after_build_state
)

inject_hud_gimbal = System.new("inject_hud_gimbal")
   :reads(C_GIMBALS .. C_NOT_HUD)
   :writes(C_GIMBALS .. C_HUD)
   :via(vector)

on_level_call:concat(
   inject_hud ..
   inject_gimbals ..
   inject_hud_gimbal ..
   gorb_after_build_state
)

derive_hud_matrix = System.new("derive_hud_matrix")
   :reads(
      C_HUD .. C_HANDS_POSITION,
      C_HUD .. C_HANDS_ORIENTATION,
      C_GIMBALS .. C_HUD
   )
   :writes(C_MATRICES .. C_HUD)
   :via(function(hands_position, hands_orientation, gimbal_hud)
      return matrix():mul(
         matrix():mul(
            matrix():identity():translate(
               hands_position
            ),
            matrix():setHPB(vector():mul(
               hands_orientation,
               DEG2RAD
            ))
         ),
         matrix():setHPB(gimbal_hud)
      )
   end)

on_level_call:concat(
   inject_matrices ..
   inject_hud_gimbal ..
   derive_hud_matrix ..
   gorb_after_build_state
)

apply_hud_matrix = System.new("apply_hud_matrix")
   :reads(C_MATRICES .. C_HUD)
   :writes(
      C_HUD .. C_HANDS_POSITION,
      C_HUD .. C_HANDS_ORIENTATION
   )
   :via(function(mat_hud)
      return mat_hud.c, mat_hud:getHPB():mul(RAD2DEG)
   end)

actor_on_update:concat(
   gorb_before_apply_state ..
   apply_hud_matrix ..
   gorb_after_apply_state
)

--- Apply aggregated state values to the HUD adjuster
apply_hud = System.new("apply_hud")
   :reads(C_HUD)
   :via(function(hud)
      hud_adjust.enabled(true)
      set_hud_params(hud)
   end)

actor_on_update:concat(
   apply_hud_matrix ..
   apply_hud ..
   gorb_after_apply_state
)

unapply_hud = System.new("unapply_hud")
   :reads(C_NOT_HUD)
   :via(function()
      hud_adjust.enabled(false)
   end)

actor_on_update:concat(
   gorb_before_apply_state ..
   unapply_hud ..
   gorb_after_apply_state
)
