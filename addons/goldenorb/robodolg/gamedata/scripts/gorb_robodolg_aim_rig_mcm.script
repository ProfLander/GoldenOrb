----------------------------------------------------------------------------
-- RoboDolg: Cache
----------------------------------------------------------------------------
-- Implemented by Lhan
----------------------------------------------------------------------------

cl_import(this, {
   gorb_main = {"gorb_after_build_state"},
   cl_system = {"System"},
   cl_optics = {"Lens"},
   cl_types = {"is_nil", "is_boolean", "or_is"},
   cl_schedule = {
      "on_level_call",
      "actor_on_update",
      "actor_on_update_finish"
   },
   robodolg_shapes = {
      "RED",
      "GREEN",
      "CYAN",
      "MAGENTA",
      "YELLOW",
      "WHITE",
      "draw_line",
      "draw_ngon",
   },
   robodolg_camera = {"ui_2d"},
   gorb_actor_comps = {"C_ACTOR"},
   gorb_camera_comps = {"C_CAMERA"},
   gorb_hud_comps = {"C_HUD"},
   gorb_weapon_comps = {"C_WEAPON"},
   gorb_enable_comps = {"C_ENABLE"},
   gorb_robodolg_mcm = {
      "tree",
      "inject_enable_robodolg",
      "update_camera_matrix"
   },
   gorb_robodolg_comps = {"C_ROBODOLG"},
   gorb_robodolg_cache_comps = {
      "C_ROBODOLG_CACHE",
      "C_POS",
      "C_AIM",
      "C_FIRE_POS",
   },
   mcm_builder = {
      "ImageWithText",
      "Checkbox",
   },
})

-- Constants

C_DRAW_AIM_RIG = Lens.where("draw_aim_rig", or_is(is_nil, is_boolean))

-- State

local page = tree:pages("aim_rig")

page:settings(ImageWithText.new("aim_rig_title"):text("aim_rig"))

local should_draw = page:settings(
   Checkbox.new("draw_aim_rig"):default(true)
)

-- Implementation

inject_enable_draw_aim_rig = System.new("inject_enable_draw_aim_rig")
   :writes(C_ENABLE .. C_ROBODOLG .. C_DRAW_AIM_RIG)
   :via(function()
      return should_draw:get() or nil
   end)

on_level_call:concat(
   inject_enable_robodolg ..
   inject_enable_draw_aim_rig ..
   gorb_after_build_state
)

--- Line from actor to its aim point
draw_actor_aim = System.new("draw_actor_aim")
   :reads(
      C_ROBODOLG_CACHE .. C_ACTOR .. C_POS,
      C_ROBODOLG_CACHE .. C_ACTOR .. C_AIM,
      C_ENABLE .. C_ROBODOLG .. C_DRAW_AIM_RIG
   )
   :via(function(actor_pos, actor_aim)
      draw_line(
         ui_2d(actor_pos, true)(vector()),
         ui_2d(actor_aim, true)(vector()),
         WHITE
      )
   end)

actor_on_update:concat(
   update_camera_matrix ..
   draw_actor_aim ..
   actor_on_update_finish
)

--- Circle around hands origin
draw_hands_origin = System.new("draw_hands_origin")
   :reads(
      C_ROBODOLG_CACHE .. C_HUD .. C_POS,
      C_ENABLE .. C_ROBODOLG .. C_DRAW_AIM_RIG
   )
   :via(function(hud_pos)
      draw_ngon(
         0.02,
         8,
         GREEN,
         ui_2d(hud_pos, true)
      )
   end)

actor_on_update:concat(
   update_camera_matrix ..
   draw_hands_origin ..
   actor_on_update_finish
)

--- Line from hands origin to hands aim point
draw_hands_aim = System.new("draw_hands_aim")
   :reads(
      C_ROBODOLG_CACHE .. C_HUD .. C_POS,
      C_ROBODOLG_CACHE .. C_HUD .. C_AIM,
      C_ENABLE .. C_ROBODOLG .. C_DRAW_AIM_RIG
   )
   :via(function(hud_pos, hud_aim)
      hud_aim = ui_2d(hud_aim, true)(vector())
      draw_line(
         ui_2d(hud_pos, true)(vector()),
         hud_aim,
         GREEN
      )
   end)

actor_on_update:concat(
   update_camera_matrix ..
   draw_hands_aim ..
   actor_on_update_finish
)

--- Line from weapon barrel to weapon aim point
draw_weapon_aim = System.new("draw_weapon_aim")
   :reads(
      C_ROBODOLG_CACHE .. C_WEAPON .. C_FIRE_POS,
      C_ROBODOLG_CACHE .. C_WEAPON .. C_AIM,
      C_ENABLE .. C_ROBODOLG .. C_DRAW_AIM_RIG
   )
   :via(function(weapon_fire_pos, weapon_aim)
      draw_line(
         ui_2d(weapon_fire_pos, true)(vector()),
         ui_2d(weapon_aim, true)(vector()),
         RED
      )
   end)

actor_on_update:concat(
   update_camera_matrix ..
   draw_weapon_aim ..
   actor_on_update_finish
)

--- Line from actor aim point to camera aim point
draw_actor_camera_aim = System.new("draw_actor_camera_aim")
   :reads(
      C_ROBODOLG_CACHE .. C_ACTOR .. C_AIM,
      C_ROBODOLG_CACHE .. C_CAMERA .. C_AIM,
      C_ENABLE .. C_ROBODOLG .. C_DRAW_AIM_RIG
   )
   :via(function(actor_aim, camera_aim)
      draw_line(
         ui_2d(actor_aim, true)(vector()),
         ui_2d(camera_aim, true)(vector()),
         CYAN
      )
   end)

actor_on_update:concat(
   update_camera_matrix ..
   draw_actor_camera_aim ..
   actor_on_update_finish
)

--- Line from camera aim point to hands aim point
draw_camera_hands_aim = System.new("draw_camera_hands_aim")
   :reads(
      C_ROBODOLG_CACHE .. C_CAMERA .. C_AIM,
      C_ROBODOLG_CACHE .. C_HUD.. C_AIM,
      C_ENABLE .. C_ROBODOLG .. C_DRAW_AIM_RIG
   )
   :via(function(camera_aim, hands_aim)
      draw_line(
         ui_2d(camera_aim, true)(vector()),
         ui_2d(hands_aim, true)(vector()),
         YELLOW
      )
   end)

actor_on_update:concat(
   update_camera_matrix ..
   draw_camera_hands_aim ..
   actor_on_update_finish
)

--- Line from camera aim point to weapon aim point
draw_camera_weapon_aim = System.new("draw_camera_weapon_aim")
   :reads(
      C_ROBODOLG_CACHE .. C_CAMERA .. C_AIM,
      C_ROBODOLG_CACHE .. C_WEAPON .. C_AIM,
      C_ENABLE .. C_ROBODOLG .. C_DRAW_AIM_RIG
   )
   :via(function(camera_aim, weapon_aim)
      draw_line(
         ui_2d(camera_aim, true)(vector()),
         ui_2d(weapon_aim, true)(vector()),
         MAGENTA
      )
   end)

actor_on_update:concat(
   update_camera_matrix ..
   draw_camera_weapon_aim ..
   actor_on_update_finish
)

--- Triangle comprised of hands origin, hands aim, and weapon barrel
draw_hands_weapon_aim = System.new("draw_hands_weapon_aim")
   :reads(
      C_ROBODOLG_CACHE .. C_HUD .. C_POS,
      C_ROBODOLG_CACHE .. C_HUD .. C_AIM,
      C_ROBODOLG_CACHE .. C_WEAPON .. C_AIM,
      C_ROBODOLG_CACHE .. C_WEAPON .. C_FIRE_POS,
      C_ENABLE .. C_ROBODOLG .. C_DRAW_AIM_RIG
   )
   :via(function(hands_pos, hands_aim, weapon_aim, weapon_fire_pos)
      hands_pos = ui_2d(hands_pos, true)(vector())
      hands_aim = ui_2d(hands_aim, true)(vector())
      weapon_aim = ui_2d(weapon_aim, true)(vector())
      weapon_fire_pos = ui_2d(weapon_fire_pos, true)(vector())

      draw_line(
         hands_pos,
         weapon_fire_pos,
         GREEN
      )

      draw_line(
         hands_aim,
         weapon_fire_pos,
         GREEN
      )

      draw_line(
         hands_aim,
         weapon_aim,
         CYAN
      )
   end)

actor_on_update:concat(
   update_camera_matrix ..
   draw_hands_weapon_aim ..
   actor_on_update_finish
)

