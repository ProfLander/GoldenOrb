----------------------------------------------------------------------------
-- RoboDolg: Aim Spring
----------------------------------------------------------------------------
-- Implemented by Lhan
----------------------------------------------------------------------------

--[[
-- Imports

--- Math
local DEG2RAD = cl_math.DEG2RAD
local TAU = cl_math.TAU

--- String
local parse_vector = cl_string.parse_vector

--- Main
local gorb_after_apply_state = gorb_main.gorb_after_apply_state

--- Enable Components
local C_ENABLE = gorb_enable_comps.C_ENABLE

--- RoboDolg
local tree = gorb_robodolg_mcm.tree
local inject_enable_robodolg = gorb_robodolg_mcm.inject_enable_robodolg

--- Robodolg Components
local C_ROBODOLG = gorb_robodolg_comps.C_ROBODOLG

--- Cache Components
local C_ROBODOLG_CACHE = gorb_robodolg_cache_comps.C_ROBODOLG_CACHE

--- Camera Components
local C_CAMERA = gorb_camera_comps.C_CAMERA

--- Schedule
local System = cl_schedule.System
local Lens = cl_schedule.Lens
local actor_on_update = cl_schedule.actor_on_update
local actor_on_update_finish = cl_schedule.actor_on_update_finish
local is_non_nil = cl_schedule.is_non_nil
local is_boolean = cl_schedule.is_boolean

--- Shapes
local draw_line = robodolg_shapes.draw_line

--- Camera
local ui_2d = robodolg_camera.ui_2d

--- MCM Builder
local ImageWithText = mcm_builder.ImageWithText
local Checkbox = mcm_builder.Checkbox

--- Log
local log = robodolg_logging.log

-- State

local page = tree:pages("aim_spring")

page:settings(ImageWithText.new("aim_spring_title"):text("aim_spring"))

local should_draw = page:settings(
   Checkbox.new("draw_aim_spring"):default(true)
)

-- Implementation

C_SPRING_AIM = Lens.where("spring_aim", is_non_nil)
C_DRAW_AIM_SPRING = Lens.where("draw_aim_spring", is_boolean)

inject_should_draw_aim_spring = System.new("inject_should_draw_aim_spring")
   :writes(C_ENABLE .. C_ROBODOLG .. C_DRAW_AIM_SPRING)
   :via(function()
      return should_draw:get() or nil
   end)

on_level_call:concat(
   inject_enable_robodolg ..
   inject_should_draw_aim_spring ..
   gorb_after_build_state
)

draw_aim_spring = System.new("draw_aim_spring")
   :reads(
      C_SPRING_AIM,
      C_ROBODOLG_CACHE .. C_CAMERA,
      C_ENABLE .. C_ROBODOLG .. C_DRAW_AIM_SPRING
   )
   :via(function(spring_aim, camera)
      local length = parse_vector(spring_aim.length:get()):mul(DEG2RAD)
      log("length: %s", length)
--]]

      --[[
      local ty = spring_aim.type:get()
      if ty == SP_LINEAR then
         local a = hpb_to_direction(vector():set(-length.x, length.y, 0))
         local b = hpb_to_direction(vector():set(length.x, length.y, 0))
         local c = hpb_to_direction(vector():set(length.x, -length.y, 0))
         local d = hpb_to_direction(vector():set(-length.x, -length.y, 0))

         draw_line_strip(
            nil,
            compose(billboard, camera_relative)
         )(a, b, c, d, a)
      elseif ty == SP_ANGULAR then
         local d = hpb_to_direction(vector():set(length.x, length.y, 0))
         draw_ngon(
            1,
            32,
            nil,
            compose(
               function(v)
                  return v
                     :mul(d)
                     :add(vector():set(0, 0, 1))
               end,
               billboard,
               camera_relative
            )
         )
      else
         assert(nil, string.format("Unrecognized string type %s", ty))
      end
      --]]

--[[
      local cam_aim = camera.aim
      local acc = nil
      for i=1,32 do
         local t = i / 31
         local x = math.sin(t * TAU)
         local y = math.cos(t * TAU)
         local v = vector():set(
            x * length.x,
            y * length.y,
            length.x * length.y
         )
         if acc then
            draw_line(
               ui_2d(cam_aim, true)(acc),
               ui_2d(cam_aim, true)(v)
            )
         end
         acc = vector():set(v)
      end
   end)

actor_on_update:concat(
   gorb_after_apply_state ..
   inject_should_draw_aim_spring ..
   draw_aim_spring ..
   actor_on_update_finish
)
--]]
