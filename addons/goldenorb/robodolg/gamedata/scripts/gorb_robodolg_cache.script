----------------------------------------------------------------------------
-- RoboDolg: Components
----------------------------------------------------------------------------
-- Implemented by Lhan
----------------------------------------------------------------------------

cl_import(this, {
   cl_system = {"System"},
   cl_schedule = {"on_level_call"},
   gorb_matrices_comps = {"C_MATRICES"},
   gorb_actor_comps = {"C_ACTOR"},
   gorb_camera_comps = {"C_PELVIS", "C_CAMERA"},
   gorb_hud_comps = {"C_HUD"},
   gorb_weapon_comps = {"C_WEAPON"},
   gorb_robodolg_cache_comps = {
      "C_ROBODOLG_CACHE",
      "C_NOT_ROBODOLG_CACHE",
   },
   gorb_main = {"gorb_before_build_state"},
   gorb_weapon = {
      "get_weapon_aim_point",
      "get_fire_bone_position",
      "get_fire_bone_rotation",
   }
})

-- Implementation

inject_robodolg_cache = System.new("inject_robodolg_cache")
   :reads(C_NOT_ROBODOLG_CACHE)
   :writes(C_ROBODOLG_CACHE)
   :via(function()
      return {}
   end)

robodolg_cache = System.new("robodolg_cache")
   :reads(
      C_WEAPON,
      C_MATRICES .. C_ACTOR,
      C_MATRICES .. C_PELVIS,
      C_MATRICES .. C_CAMERA,
      C_MATRICES .. C_HUD
   )
   :writes(
      C_ROBODOLG_CACHE .. C_ACTOR,
      C_ROBODOLG_CACHE .. C_PELVIS,
      C_ROBODOLG_CACHE .. C_CAMERA,
      C_ROBODOLG_CACHE .. C_HUD,
      C_ROBODOLG_CACHE .. C_WEAPON
   )
   :via(function(weapon, mat_actor, mat_pelvis, mat_cam, mat_hud)
      local mat_hands = matrix():mul(
         mat_cam,
         mat_hud
      )

      local mat_pelv = matrix():mul(
         mat_actor,
         mat_pelvis
      )

      return
         {
            pos = mat_actor.c,
            aim = vector():add(
               mat_actor.c,
               vector():mul(
                  mat_actor.k,
                  1000
               )
            ),
            rot = mat_actor:getHPB(),
         },
         {
            pos = mat_pelv.c,
            aim = vector():add(
               mat_pelv.c,
               vector():mul(
                  mat_pelv.k,
                  1000
               )
            ),
            rot = mat_pelv:getHPB(),
         },
         {
            pos = mat_cam.c,
            aim = vector():add(
               mat_cam.c,
               vector():mul(mat_cam.k, 1000)
            ),
            rot = mat_cam:getHPB()
         },
         {
            pos = mat_hands.c,
            aim = vector():add(
               mat_hands.c,
               vector():mul(mat_hands.k, 1000)
            ),
            rot = mat_hands:getHPB(),
         },
         {
            aim = get_weapon_aim_point(weapon),
            rot = get_fire_bone_rotation(weapon),
            fire_pos = get_fire_bone_position(weapon),
         }
   end)

on_level_call:concat(
   on_level_call.start ..
   inject_robodolg_cache ..
   robodolg_cache ..
   gorb_before_build_state
)
