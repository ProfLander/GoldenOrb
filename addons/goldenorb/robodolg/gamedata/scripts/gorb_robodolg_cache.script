-- Imports

--- Schedule
local system = cl_schedule.system
local LEVEL_CALL = cl_schedule.LEVEL_CALL

--- Main 
local gorb_before_build_state = gorb_main.gorb_before_build_state

--- Weapon
local get_weapon_aim_point = gorb_weapon.get_weapon_aim_point
local get_fire_bone_position = gorb_weapon.get_fire_bone_position
local get_fire_bone_rotation = gorb_weapon.get_fire_bone_rotation

cache = system("cache")
   :runs_before(gorb_before_build_state)
   :reads(
      "actor",
      "wpn",
      {"matrices", "actor"},
      {"matrices", "camera"},
      {"matrices", "hud"}
   )
   :writes(
      {"robodolg_cache", "actor"},
      {"robodolg_cache", "camera"},
      {"robodolg_cache", "hands"},
      {"robodolg_cache", "weapon"}
   )
   :via(function(state)
      local actor_pos = state.actor:position()
      local mat_cam = state.matrices.camera
      local mat_hands = matrix():mul(
         state.matrices.camera,
         state.matrices.hud
      )

      return {
         robodolg_cache = {
            actor = {
               pos = actor_pos,
               aim = vector():add(
                  actor_pos,
                  vector():mul(
                     state.matrices.actor.k,
                     1000
                  )
               ),
               rot = state.matrices.actor:getHPB(),
            },
            camera = {
               pos = mat_cam.c,
               aim = vector():add(
                  mat_cam.c,
                  vector():mul(mat_cam.k, 1000)
               ),
               rot = mat_cam:getHPB()
            },
            hands = {
               pos = mat_hands.c,
               aim = vector():add(
                  mat_hands.c,
                  vector():mul(mat_hands.k, 1000)
               ),
               rot = mat_hands:getHPB(),
            },
            weapon = {
               aim = get_weapon_aim_point(state.wpn),
               rot = get_fire_bone_rotation(state.wpn),
               fire_pos = get_fire_bone_position(state.wpn),
            }
         },
      }
   end)
   :during(LEVEL_CALL)
