-- Imports

--- Schedule
local System = _cl_schedule.System
local on_level_call = _cl_schedule.on_level_call
local on_level_call_start = _cl_schedule.on_level_call_start

--- Matrices Components 
local C_MATRICES = gorb_matrices_comps.C_MATRICES

--- Actor Components 
local C_ACTOR = gorb_actor_comps.C_ACTOR

--- Camera Components 
local C_CAMERA = gorb_camera_comps.C_CAMERA

--- HUD Components 
local C_HUD = gorb_hud_comps.C_HUD

--- Weapon Components 
local C_WEAPON = gorb_weapon_comps.C_WEAPON

--- Cache Components 
local C_ROBODOLG_CACHE = gorb_robodolg_cache_comps.C_ROBODOLG_CACHE
local C_NOT_ROBODOLG_CACHE = gorb_robodolg_cache_comps.C_NOT_ROBODOLG_CACHE

--- Main 
local gorb_before_build_state = gorb_main.gorb_before_build_state

--- Weapon
local get_weapon_aim_point = gorb_weapon.get_weapon_aim_point
local get_fire_bone_position = gorb_weapon.get_fire_bone_position
local get_fire_bone_rotation = gorb_weapon.get_fire_bone_rotation

inject_robodolg_cache = System.new("inject_robodolg_cache")
   :reads(C_NOT_ROBODOLG_CACHE)
   :writes(C_ROBODOLG_CACHE)
   :via(function()
      return {}
   end)

robodolg_cache = System.new("robodolg_cache")
   :reads(
      C_WEAPON,
      C_MATRICES .. C_ACTOR,
      C_MATRICES .. C_CAMERA,
      C_MATRICES .. C_HUD
   )
   :writes(
      C_ROBODOLG_CACHE .. C_ACTOR,
      C_ROBODOLG_CACHE .. C_CAMERA,
      C_ROBODOLG_CACHE .. C_HUD,
      C_ROBODOLG_CACHE .. C_WEAPON
   )
   :via(function(weapon, mat_actor, mat_cam, mat_hud)
      local mat_hands = matrix():mul(
         mat_cam,
         mat_hud
      )

      return
         {
            pos = mat_actor.c,
            aim = vector():add(
               mat_actor.c,
               vector():mul(
                  mat_actor.k,
                  1000
               )
            ),
            rot = mat_actor:getHPB(),
         },
         {
            pos = mat_cam.c,
            aim = vector():add(
               mat_cam.c,
               vector():mul(mat_cam.k, 1000)
            ),
            rot = mat_cam:getHPB()
         },
         {
            pos = mat_hands.c,
            aim = vector():add(
               mat_hands.c,
               vector():mul(mat_hands.k, 1000)
            ),
            rot = mat_hands:getHPB(),
         },
         {
            aim = get_weapon_aim_point(weapon),
            rot = get_fire_bone_rotation(weapon),
            fire_pos = get_fire_bone_position(weapon),
         }
   end)

on_level_call:concat(
   on_level_call_start ..
   inject_robodolg_cache ..
   robodolg_cache ..
   gorb_before_build_state
)
