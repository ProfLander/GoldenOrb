----------------------------------------------------------------------------
-- RoboDolg: Crosshair
----------------------------------------------------------------------------
-- Implemented by Lhan

----------------------------------------------------------------------------

-- Imports

--- Shapes
local RED = robodolg_shapes.RED
local GREEN = robodolg_shapes.GREEN
local BLUE = robodolg_shapes.BLUE
local WHITE = robodolg_shapes.WHITE
local draw_crosshair = robodolg_shapes.draw_crosshair

--- Camera
local ui_2d = robodolg_camera.ui_2d

--- MCM Builder
local ImageWithText = mcm_builder.ImageWithText
local Title = mcm_builder.Title
local Checkbox = mcm_builder.Checkbox
local Trackbar = mcm_builder.Trackbar

--- Robodolg
local tree = gorb_robodolg_mcm.tree

--- Schedule
local System = _cl_schedule.System
local Lens = _cl_schedule.Lens
local is_boolean = _cl_schedule.is_boolean
local actor_on_update = _cl_schedule.actor_on_update
local actor_on_update_finish = _cl_schedule.actor_on_update_finish

--- Enable Components
local C_ENABLE = gorb_enable_comps.C_ENABLE

--- Actor Components
local C_ACTOR = gorb_actor_comps.C_ACTOR

--- Camera Components
local C_CAMERA = gorb_camera_comps.C_CAMERA

--- HUD Components
local C_HUD = gorb_hud_comps.C_HUD

--- Weapon Components
local C_WEAPON = gorb_weapon_comps.C_WEAPON

--- Robodolg Components
local C_ROBODOLG = gorb_robodolg_comps.C_ROBODOLG

--- Cache Components
local C_ROBODOLG_CACHE = gorb_robodolg_cache_comps.C_ROBODOLG_CACHE
local C_ROT = gorb_robodolg_cache_comps.C_ROT
local C_AIM = gorb_robodolg_cache_comps.C_AIM

--- Main
local gorb_after_apply_state = gorb_main.gorb_after_apply_state

--- Function
local advise_before = cl_function.advise_before
local curry_r = cl_function.curry_r

--- Math
local vector_rotate_z = cl_math.vector_rotate_z

--- Logging
local log = robodolg_logging.log

-- Constants

COLOR_ACTOR = WHITE
COLOR_CAMERA = BLUE
COLOR_HANDS = GREEN
COLOR_WEAPON = RED

-- State

--- MCM Page
local page = tree:pages("crosshair")

--- Page title
page:settings(ImageWithText.new("crosshair_title"):text("crosshair"))

--- Visual section
page:settings(Title.new("visual_title"):text("visual"))
local
   cross_size,
   ring_size,
   ring_segs =
   page:settings(
      Trackbar.new("cross_size")
         :increment(0.01)
         :default(0.03)
         :minmax(0, 1),
      Trackbar.new("ring_size")
         :increment(0.01)
         :default(0.02)
         :minmax(0, 1),
      Trackbar.new("ring_segments")
         :increment(1)
         :default(8)
         :minmax(3, 64)
   )

--- Actor section
page:settings(Title.new("actor_title"):text("actor"))
local draw_actor = page:settings(
   Checkbox.new("draw_actor")
      :default(true)
)

--- Camera section
page:settings(Title.new("camera_title"):text("camera"))
local draw_camera = page:settings(
   Checkbox.new("draw_camera")
      :default(true)
)

--- Hands section
page:settings(Title.new("hud_title"):text("hud"))
local draw_hud, rotate_hud = page:settings(
   Checkbox.new("draw_hud")
      :default(true),
   Checkbox.new("rotate_hud")
      :default(true)
)

--- Weapon section
page:settings(Title.new("weapon_title"):text("weapon"))
local
   draw_weapon,
   rotate_weapon =
   page:settings(
   Checkbox.new("draw_weapon")
         :default(true),
      Checkbox.new("rotate_weapon")
         :default(true)
   )

-- Implementation

function vert(v, cond, r)
   log("vert(%s, %s, %s)", v, cond, r)
   local out = ui_2d(v, true)
   return cond
      and advise_before(out, curry_r(vector_rotate_z, r))
      or out
end

local C_DRAW_ACTOR_CROSSHAIR = Lens.where("draw_actor_crosshair", is_boolean)
local C_DRAW_CAMERA_CROSSHAIR = Lens.where("draw_camera_crosshair", is_boolean)
local C_DRAW_HUD_CROSSHAIR = Lens.where("draw_hud_crosshair", is_boolean)
local C_DRAW_WEAPON_CROSSHAIR = Lens.where("draw_weapon_crosshair", is_boolean)

inject_enable_draw_crosshair = System.new("inject_enable_draw_crosshair")
   :writes(
      C_ENABLE .. C_ROBODOLG .. C_DRAW_ACTOR_CROSSHAIR,
      C_ENABLE .. C_ROBODOLG .. C_DRAW_CAMERA_CROSSHAIR,
      C_ENABLE .. C_ROBODOLG .. C_DRAW_HUD_CROSSHAIR,
      C_ENABLE .. C_ROBODOLG .. C_DRAW_WEAPON_CROSSHAIR
   )
   :via(function()
      return
         draw_actor:get() or nil,
         draw_camera:get() or nil,
         draw_hud:get() or nil,
         draw_weapon:get() or nil
   end)

--- Actor
draw_actor_crosshair = System.new("draw_actor_crosshair")
   :reads(
      C_ROBODOLG_CACHE .. C_ACTOR .. C_AIM,
      C_ENABLE .. C_ROBODOLG .. C_DRAW_CAMERA_CROSSHAIR
   )
   :via(function(actor_aim)
      draw_crosshair(
         cross_size:get(),
         ring_size:get(),
         ring_segs:get(),
         COLOR_ACTOR,
         ui_2d(actor_aim, true)
      )
   end)

--- Camera
draw_camera_crosshair = System.new("draw_camera_crosshair")
   :reads(
      C_ROBODOLG_CACHE .. C_CAMERA .. C_AIM,
      C_ENABLE .. C_ROBODOLG .. C_DRAW_CAMERA_CROSSHAIR
   )
   :via(function(camera_aim)
      draw_crosshair(
         cross_size:get(),
         ring_size:get(),
         ring_segs:get(),
         COLOR_CAMERA,
         ui_2d(camera_aim, true)
      )
   end)

--- HUD
draw_hud_crosshair = System.new("draw_hud_crosshair")
   :reads(
      C_ROBODOLG_CACHE .. C_HUD .. C_AIM,
      C_ROBODOLG_CACHE .. C_HUD .. C_ROT,
      C_ROBODOLG_CACHE .. C_CAMERA .. C_ROT,
      C_ENABLE .. C_ROBODOLG .. C_DRAW_HUD_CROSSHAIR
   )
   :via(function(hands_aim, hands_rot, camera_rot)
      draw_crosshair(
         cross_size:get(),
         ring_size:get(),
         ring_segs:get(),
         COLOR_HANDS,
         vert(
            hands_aim,
            rotate_hud:get(),
            camera_rot.z - hands_rot.z
         )
      )
   end)

--- Weapon
draw_weapon_crosshair = System.new("draw_weapon_crosshair")
   :reads(
      C_ROBODOLG_CACHE .. C_WEAPON .. C_AIM,
      C_ROBODOLG_CACHE .. C_WEAPON .. C_ROT,
      C_ROBODOLG_CACHE .. C_CAMERA .. C_ROT,
      C_ENABLE .. C_ROBODOLG .. C_DRAW_WEAPON_CROSSHAIR
   )
   :via(function(weapon_aim, weapon_rot, camera_rot)
      draw_crosshair(
         cross_size:get(),
         ring_size:get(),
         ring_segs:get(),
         COLOR_WEAPON,
         vert(
            weapon_aim,
            rotate_weapon:get(),
            camera_rot.z - weapon_rot.z
         )
      )
   end)

actor_on_update:concat(
   gorb_after_apply_state ..
   inject_enable_draw_crosshair ..
   draw_actor_crosshair ..
   draw_camera_crosshair ..
   draw_hud_crosshair ..
   draw_weapon_crosshair ..
   actor_on_update_finish
)
