----------------------------------------------------------------------------
-- RoboDolg: GoldenOrb
----------------------------------------------------------------------------
-- 
-- GoldenOrb modules for RoboDolg.
-- 
----------------------------------------------------------------------------
-- Implemented by Lhan
----------------------------------------------------------------------------

cl_import(this, {
   cl_system = {"System"},
   cl_schedule = {
      "actor_on_update",
      "on_level_call",
   },
   gorb_main = {
      "gorb_before_modify_state",
      "gorb_after_modify_state",
      "gorb_after_apply_state",
   },
   gorb_enable_comps = {"C_ENABLE"},
   gorb_robodolg_comps = {"C_ROBODOLG"},
   gorb_matrices_comps = {"C_MATRICES"},
   gorb_camera_comps = {"C_CAMERA"},
   robodolg_mcm = {{tree = "mcm_tree"}}
})

-- State

tree = mcm_tree:subtrees("goldenorb")

function robodolg_mcm.reset_pool() end
function robodolg_camera.update_camera_matrix() end

inject_enable_robodolg = System.new("inject_enable_robodolg")
   :writes(C_ENABLE .. C_ROBODOLG)
   :via(function()
      return {}
   end)

on_level_call:concat(
   on_level_call.start ..
   inject_enable_robodolg ..
   on_level_call.finish
)

reset_shapes = System.new("reset_shapes")
   :via(robodolg_shapes.reset)

actor_on_update:concat(
   actor_on_update.start ..
   reset_shapes ..
   gorb_before_modify_state
)

update_camera_matrix = System.new("update_camera_matrix")
   :reads(C_MATRICES .. C_CAMERA)
   :via(function(mat_cam)
      robodolg_camera.camera_matrix = mat_cam
   end)

actor_on_update:concat(
   gorb_after_apply_state ..
   update_camera_matrix ..
   actor_on_update.finish
)
