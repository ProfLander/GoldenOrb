----------------------------------------------------------------------------
-- RoboDolg: Shape Functions
----------------------------------------------------------------------------
-- Implemented by Lhan
----------------------------------------------------------------------------

-- Imports

--- List
local range = cl_list.range
local map = cl_list.map
local fold = cl_list.fold
local foreach_list = cl_list.foreach

--- Function
local id = cl_function.id

--- Table
local foreach_table = cl_table.foreach

--- Math
local TAU = cl_math.TAU

--- Logging
local log = robodolg_logging.log

-- Constants

WHITE = vector():set(1, 1, 1)
RED = vector():set(1, 0, 0)
GREEN = vector():set(0, 1, 0)
BLUE = vector():set(0, 0, 1)
CYAN = vector():set(0, 1, 1)
MAGENTA = vector():set(1, 0, 1)
YELLOW = vector():set(1, 1, 0)

-- State

local next_id = 1

---@type table<number, any[]>
local shapes_pool = {}

---@type table<number, any[]>
local shapes_used = {}

-- Implementation

---@return nil
function reset()
   log("reset()")
   foreach_table(
      shapes_used,
      function(k,used)
         while #used > 0 do
            local shape = table.remove(used, #used)
            shape.visible = false
            table.insert(shapes_pool[k], shape)
         end
      end
   )
end

---@return number
function get_id()
   local id = next_id
   next_id = next_id + 1
   return id
end

---@param ty number
---@return nil
function allocate_shape_storage(ty)
   log("allocate_shape_storage(%s)", ty)

   if not shapes_pool[ty] then
      shapes_pool[ty] = {}
   end

   if not shapes_used[ty] then
      shapes_used[ty] = {}
   end
end

---@param ty number
---@return any
function get_shape(ty)
   log("get_shape(%s)", ty)

   allocate_shape_storage(ty)

   local pool = shapes_pool[ty]
   log("  pool: %s", pool)

   local used = shapes_used[ty]
   log("  used: %s", used)

   local shape = nil
   if #pool > 0 then
      log("  Pooled shape available")
      shape = table.remove(pool, #pool)
   else
      log("  Allocating new shape")
      shape = debug_render.add_object(
         get_id(),
         ty
      )
   end
   log("  shape: %s", shape)
   table.insert(used, shape)
   shape.visible = true
   return shape
end

---@param pa vector
---@param pb vector
---@param color? vector
---@param f? fun(v: vector): vector
function draw_line(pa, pb, color, f)
   log("draw_line(%s, %s, %s)", pa, pb, color)

   f = f or id
   pa = f(vector():set(pa))
   pb = f(vector():set(pb))

   assert(pa, "Invalid line start")
   assert(pa, "Invalid line end")
   color = color or vector():set(1, 1, 1)

   local line = get_shape(DBG_ScriptObject.line):cast_dbg_line()

   line.point_a = pa
   line.point_b = pb
   line.color = fcolor():set(
      color.x,
      color.y,
      color.z,
      1
   )
end

---@param pos vector
---@param scale? number
---@param color? vector
---@return nil
function draw_sphere(pos, scale, color)
   log("debug_sphere(%s, %s, %s)", pos, scale, color)

   assert(pos, "Invalid position")
   scale = scale or 0.1
   color = color or vector():set(1, 1, 1)

   local sphere = get_shape(DBG_ScriptObject.sphere):cast_dbg_sphere()

   sphere.matrix = matrix():mul(
      matrix():translate(pos),
      matrix():identity():scale(
         scale,
         scale,
         scale
      )
   )
   sphere.color = fcolor():set(
      color.x,
      color.y,
      color.z,
      1
   )
end

---@param color? vector
---@param f? fun(v: vector): vector
---@return fun(...: [vector, vector]): nil
function draw_line_list(color, f)
   return function(...)
      foreach_list(
         {...},
         function(line)
            draw_line(line[1], line[2], color, f)
         end
      )
   end
end

---@param color? vector
---@param f? fun(v: vector): vector
---@return fun(...: vector): nil
function draw_line_strip(color, f)
   return function(...)
      fold(
         {...},
         nil,
         function(acc, point)
            if acc then
               draw_line(acc, point, color, f)
            end
            return point
         end
      )
   end
end

---@param rad number
---@param sides number
---@param color? vector
---@param f? fun(v: vector): vector
---@return nil
function draw_ngon(rad, sides, color, f)
   log("draw_ngon(%s, %s, %s, %s)", rad, sides, color, f)
   draw_line_strip(color, f)(
      unpack(
         map(
            range(1, sides+1),
            function(i)
               local t = i / sides
               local r = t * TAU
               return vector():set(math.sin(r), math.cos(r), 0):mul(rad)
            end
         )
      )
   )
end


---@param extent vector
---@param color? vector
---@param f? fun(v: vector): vector
---@return nil
function draw_cross(extent, color, f)
   log("draw_cross(%s, %s, %s)", extent, color, f)
   draw_line_list(color, f)(
      {
         vector():set(-extent.x, 0, 0),
         vector():set(extent.x, 0, 0),
      },
      {
         vector():set(0, extent.y, 0),
         vector():set(0, -extent.y, 0),
      }
   )
end

---@param cross_size number
---@param ring_size number
---@param ring_segs number
---@param color? vector
function draw_crosshair(cross_size, ring_size, ring_segs, color, f)
   -- Cross
   draw_cross(
      vector():set(cross_size, cross_size, 0),
      color,
      f
   )

   -- Diamond
   draw_ngon(
      ring_size,
      ring_segs,
      color,
      f
   )
end

---@param f fun(vector): nil
---@param start vector
---@param finish vector
---@param steps number
---@return nil
function draw_arrayed(f, start, finish, steps)
   log("draw_arrayed(%s, %s, %s, %s)", f, start, finish, steps)
   foreach_list(
      range(1, steps),
      function(i)
         f(vector():lerp(start, finish, i / steps))
      end
   )
end
