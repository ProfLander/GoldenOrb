----------------------------------------------------------------------------
-- RoboDolg: Weapon Bones
----------------------------------------------------------------------------
-- Implemented by Lhan
----------------------------------------------------------------------------

-- Imports

--- Shapes
local CYAN = robodolg_shapes.CYAN
local draw_ngon = robodolg_shapes.draw_ngon
local draw_line = robodolg_shapes.draw_line
local ui_2d = robodolg_camera.ui_2d

--- Math
local hpb_to_direction = cl_math.hpb_to_direction

--- RoboDolg
local tree = robodolg_vanilla_mcm.tree

--- Table
local foreach = cl_table.foreach

--- MCM Builder
local ImageWithText = mcm_builder.ImageWithText
local Checkbox = mcm_builder.Checkbox

--- Log
local log = robodolg_logging.log

-- Constants

POLY_SIZE = 0.02
POLY_SIDES = 4
LINE_LENGTH = 0.05
COLOR = CYAN

-- State

local page = tree:pages("weapon_bones")

page:settings(ImageWithText.new("weapon_bones_title"):text("weapon_bones"))

local should_draw = page:settings(
   Checkbox.new("draw_weapon_bones"):default(true)
)

-- Implementation

local cache = {}

function cache_bones()
   log("cache_bones")

   if not should_draw:get() then
        return
    end

   local actor = db.actor
   if not db.actor then
      return
   end

   log("  actor: %s", actor)

   local wpn = actor:active_item()
   if not wpn then
      return
   end

   log("  wpn: %s", actor)

   cache = {}
   local keys = wpn:list_bones(true)
   for i=1,#keys do
      local key = keys[i]
      log("  key: %s", key)
      local id = wpn:bone_id(key, true)
      cache[id] = {
         pos = wpn:bone_position(key, true),
         rot = wpn:bone_direction(key, true),
         parent = wpn:bone_parent(key, true),
      }
   end
end

function draw_bones()
   log("draw_bones")

   foreach(
      cache,
      function(_, bone)
         assert(type(bone) == "table", "Bone is not a table")
         assert(bone.pos ~= nil, "Bone position is nil")
         assert(bone.rot ~= nil, "Bone rotation is nil")

         draw_ngon(
            POLY_SIZE,
            POLY_SIDES,
            COLOR,
            ui_2d(bone.pos, true)
         )

         local dir = hpb_to_direction(bone.rot)
         draw_line(
            ui_2d(bone.pos, true)(vector()),
            ui_2d(
               vector():set(bone.pos)
                  :add(dir:mul(LINE_LENGTH)),
               true
            )(vector()),
            COLOR
         )

         local parent = cache[bone.parent]
         if parent then
            draw_line(
               ui_2d(bone.pos, true)(vector()),
               ui_2d(parent.pos, true)(vector()),
               COLOR
            )
         end
      end
   )
end

---@return nil
function on_game_start()
   log("robodolg_weapon_bones.on_game_start")

   RegisterScriptCallback(
      "actor_on_update",
      cache_bones
   )

   AddUniqueCall(draw_bones)
end
