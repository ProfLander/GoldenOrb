----------------------------------------------------------------------------
-- GoldenOrb: Camera State
----------------------------------------------------------------------------
-- Implemented by Lhan
----------------------------------------------------------------------------

-- Imports

--- Level
local set_cam_custom_position_direction = level.set_cam_custom_position_direction
local remove_cam_custom_position_direction = level.remove_cam_custom_position_direction

--- Logging
local log = goldenorb_logging.log

-- Constants

local DIST = 800

-- State

local cam_custom = false

local cam_rot = vector()

local prev_pos = nil
local prev_rot = nil

local delta_pos = vector()
local delta_rot = vector()

-- Implementation

--- Rotation getter
function get_camera_position()
   return device().cam_pos
end

function get_camera_direction()
   return device().cam_dir
end

function get_camera_rotation()
   return cam_rot
end

--- Delta position getter
function get_camera_delta_position()
   return delta_pos
end

--- Delta rotation getter
function get_camera_delta_rotation()
   return delta_rot
end

--- Aim point getter
function get_camera_aim_point()
   log("get_camera_aim_point(%s)")
   local dev = device()
   return dev.cam_dir:mul(DIST):add(dev.cam_pos)
end

--- Inject default camera parameters into the state
function inject_camera(state)
   state.cam = {
      enable = false,
      pos = vector(),
      rot = vector(),
      smoothing = -1,
      show_hud = true,
      affect_hud = true,
   }
   return state
end

--- Update function
function read_camera(state)
   log("read_camera(%s)", state)
   local dev = device()
   local pos = dev.cam_pos
   local dir = dev.cam_dir

   cam_rot = vector():set(
      math.atan2(dir.x, dir.z),
      math.sin(dir.y),
      0
   )

   prev_pos = prev_pos or pos
   prev_rot = prev_rot or cam_rot

   delta_pos = vector():set(pos):sub(prev_pos)
   log("  delta_pos: %s", delta_pos)

   delta_rot = vector():set(cam_rot):sub(prev_rot)
   log("  delta_rot: %s", delta_rot)

   prev_pos = pos
   prev_rot = cam_rot

   return state
end

function apply_camera(state)
   -- Apply camera state
   if not state.cam then
      return
   end

   if state.cam.enable then
      log("  Applying camera state:")
      log("    pos: %s", state.cam.pos)
      log("    rot: %s", state.cam.rot)
      log("    smoothing: %s", state.cam.smoothing)
      log("    show_hud: %s", state.cam.show_hud)
      log("    affect_hud: %s", state.cam.affect_hud)

      set_cam_custom_position_direction(
         state.cam.pos,
         state.cam.rot,
         state.cam.smoothing,
         state.cam.show_hud,
         state.cam.affect_hud
      )
      cam_custom = true
   elseif cam_custom then
      log("  Resetting camera state.")
      remove_cam_custom_position_direction()
      cam_custom = false
   end
end
