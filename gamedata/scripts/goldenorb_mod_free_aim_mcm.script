----------------------------------------------------------------------------
-- GoldenOrb: Free Aim Camera Modifier
----------------------------------------------------------------------------
-- Implemented by Lhan
----------------------------------------------------------------------------

-- Imports

--- HUD offset rotation
local apply_hud_offset_rot = goldenorb_mod_hud_offset_rot.apply_hud_offset_rot

--- Math
local rad = goldenorb_math.rad
local sign = goldenorb_math.sign
local vector_rotate_y = goldenorb_math.vector_rotate_y

--- Camera
local get_hands_direction = goldenorb_weapon.get_hands_direction

--- MCM Builder
local ImageWithText = mcm_builder.ImageWithText
local Checkbox = mcm_builder.Checkbox
local Trackbar = mcm_builder.Trackbar

--- Logging
local log = goldenorb_logging.log

-- State

page = goldenorb_mcm.tree:pages("free_aim")
page:settings(ImageWithText.new("free_aim_title"):text("free_aim"))
local enabled, eye_height, limit_yaw, limit_pitch =
   page:settings(
      Checkbox.new("enabled")
         :default(true),
      Trackbar.new("eye_height")
         :default(1.671)
         :increment(0.001)
         :minmax(1, 2),
      Trackbar.new("horizontal_limit")
         :default(45)
         :increment(0.05)
         :minmax(0, 90),
      Trackbar.new("vertical_limit")
         :default(22.5)
         :increment(0.05)
         :minmax(0, 90)
   )

local cam_rot = vector()

-- Implementation

function free_aim(state)
   log("free_aim(%s)", state)

   if not enabled:get() then
      return state
   end

   if not state.actor or not state.wpn then
      return state
   end

   log("  cam_rot: %s", cam_rot)

   local lx, ly = rad(limit_yaw:get()), rad(limit_pitch:get())
   log("  lx: %s, ly: %s", lx, ly)

   local hands_dir = get_hands_direction():normalize()
   log("  hands_dir: %s", hands_dir)

   local delta_pitch = math.asin(hands_dir.y) - cam_rot.x
   log("  delta_pitch: %s", delta_pitch)

   if math.abs(delta_pitch) > ly then
      log("  pitch moved beyond limit")
      cam_rot.x = cam_rot.x + (math.abs(delta_pitch) - ly) * sign(delta_pitch)
   end


   local cam_xz = vector_rotate_y(vector():set(0, 0, 1), cam_rot.y)

   hands_dir.y = 0
   hands_dir = hands_dir:normalize()

   local delta_yaw = math.atan2(
      vector_cross(cam_xz, hands_dir):dotproduct(vector():set(0, 1, 0)),
      cam_xz:dotproduct(hands_dir)
   )
   log("  delta_yaw: %s", delta_yaw)

   if math.abs(delta_yaw) > lx then
      log("  yaw moved beyond limit")
      cam_rot.y = cam_rot.y + (math.abs(delta_yaw) - lx) * sign(delta_yaw)
   end

   log("  cam_rot: %s", cam_rot)

   state.cam.enable = true
   state.cam.pos = state.actor:position()
      :add(vector():set(0, eye_height:get(), 0))
   state.cam.rot = vector():set(-cam_rot.y, cam_rot.x, 0)
   state.cam.affect_hud = false

   if state.hud then
      --state.hud.hands_position.z = state.hud.hands_position.z - 0.025
      --state.hud.hands_position.z = state.hud.hands_position.z + 0.1
      state.hud.hands_orientation.x = state.hud.hands_orientation.x - 0.49
   end

   return state
end

function on_game_start()
   goldenorb_main.ACTOR_ON_UPDATE
      :after(apply_hud_offset_rot, free_aim)
end
