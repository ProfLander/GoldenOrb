----------------------------------------------------------------------------
-- GoldenOrb: Offset Aim Camera Modifier
----------------------------------------------------------------------------
-- Implemented by Lhan
----------------------------------------------------------------------------

-- Imports

--- HUD offset rotation
local apply_hud_offset_rot = goldenorb_mod_hud_offset_rot.apply_hud_offset_rot

--- Spring
local spring = goldenorb_spring.spring

--- Aim
local page = goldenorb_aim.page
local aim_type = goldenorb_aim.aim_type
local AIM_OFFSET = goldenorb_aim.AIM_OFFSET
local joint_aim = goldenorb_aim.joint_aim
local spring_type = goldenorb_aim.spring_type
local spring_strength = goldenorb_aim.spring_strength
local spring_limit = goldenorb_aim.spring_limit

--- Data
local get_camera_delta_rotation = goldenorb_camera.get_camera_delta_rotation

--- String
local parse_vector = goldenorb_string.parse_vector

--- Math
local DEG2RAD = goldenorb_math.DEG2RAD

--- MCM Builder
local Line = mcm_builder.Line
local Title = mcm_builder.Title
local InputField = mcm_builder.InputField

--- Logging
local log = goldenorb_logging.log

-- State

--- MCM Title
page:settings(
   Line.new("offset_aim_line"),
   Title.new("offset_aim_title"):text("offset_aim")
)

--- MCM Settings
local sensitivity = page:settings(
   InputField.new("sensitivity")
      :default("1.0,1.0")
)

-- Implementation

function enabled()
   return aim_type:get() == AIM_OFFSET
end

function offset_aim(state)
   log("offset_aim(%s)", state)

   if not enabled() then
      return state
   end

   local ty = spring_type:get()
   local limit = parse_vector(spring_limit:get()):mul(DEG2RAD)
   local strength = parse_vector(spring_strength:get())

   joint_aim
      :impulse(
         get_camera_delta_rotation()
         :mul(parse_vector(sensitivity:get()))
         :mul(vector():set(-1, 1, 1))
      )
      :impulse_with(spring(ty, limit, strength))
      :apply_hud_orientation(state)

   return state
end

function on_game_start()
   goldenorb_main.ACTOR_ON_UPDATE
      :after(apply_hud_offset_rot, offset_aim)
end
