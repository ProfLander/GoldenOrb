----------------------------------------------------------------------------
-- GoldenOrb: Offset Aim Camera Modifier
----------------------------------------------------------------------------
-- Implemented by Lhan
----------------------------------------------------------------------------

-- Imports

--- HUD offset rotation
local apply_hud_offset_rot = goldenorb_mod_hud_offset_rot.apply_hud_offset_rot

--- Joint
local joint = goldenorb_joint.joint

--- Spring
local spring_3d_gimbal = goldenorb_spring.spring_3d_gimbal
local spring_3d_angular = goldenorb_spring.spring_3d_angular
local spring_3d_linear = goldenorb_spring.spring_3d_linear

--- Data
local get_camera_delta_rotation = goldenorb_camera.get_camera_delta_rotation

--- Math
local DEG2RAD = goldenorb_math.DEG2RAD

--- MCM Builder
local ImageWithText = mcm_builder.ImageWithText
local Title = mcm_builder.Title
local Line = mcm_builder.Line
local Checkbox = mcm_builder.Checkbox
local List = mcm_builder.List
local InputField = mcm_builder.InputField

--- Logging
local log = goldenorb_logging.log

-- State

--- MCM Page
page = goldenorb_mcm.tree:pages("offset_aim")

--- MCM Title
page:settings(
   ImageWithText.new("offset_aim_title")
    :text("offset_aim")
)


--- MCM Settings
local enabled, sensitivity = page:settings(
   Checkbox.new("enabled"):default(false),
   InputField.new("sensitivity")
      :default("1.0,1.0")
)

page:settings(
   Line.new("spring_line"),
   Title.new("spring_title"):text("spring")
)

local SP_GIMBAL = 0
local SP_ANGULAR = 1
local SP_LINEAR = 2

local spring_type, spring_strength, spring_limit =
   page:settings(
      List.new("spring_type")
         :content({
            {SP_GIMBAL, "gimbal"},
            {SP_ANGULAR, "angular"},
            {SP_LINEAR, "linear"},
         })
         :input_type("float")
         :default(0),
      InputField.new("spring_strength")
         :default("1.0,1.0"),
      InputField.new("spring_limit")
         :default("6.0,4.5")
   )

--- Angular joint
local joint_ofs = joint()

-- Implementation

function parse_vector(str)
   assert(type(str) == "string", "Input is not a string")
   local x, y, z = unpack(str_explode(str, ","))
   x = tonumber(x) or 0
   y = tonumber(y) or 0
   z = tonumber(z) or 0
   return vector():set(x, y, z)
end

function offset_aim(state)
   log("offset_aim(%s)", state)

   if not enabled:get() then
      return state
   end

   local spring = nil
   local ty = spring_type:get()
   local limit = parse_vector(spring_limit:get()):mul(DEG2RAD)
   local strength = parse_vector(spring_strength:get())
   if ty == SP_GIMBAL then
      spring = spring_3d_gimbal(limit, strength)
   elseif ty == SP_ANGULAR then
      spring = spring_3d_angular(limit.x, strength.x)
   elseif ty == SP_LINEAR then
      spring = spring_3d_linear(limit.x, strength.x)
   else
      assert(nil, string.format("Invalid spring type %s", ty))
   end

   joint_ofs
      :impulse(
         get_camera_delta_rotation()
         :mul(parse_vector(sensitivity:get()))
         :mul(vector():set(-1, 1, 1))
      )
      :impulse_with(spring)
      :apply_hud_orientation(state)

   return state
end

function on_game_start()
   goldenorb_main.ACTOR_ON_UPDATE
      :after(apply_hud_offset_rot, offset_aim)
end
