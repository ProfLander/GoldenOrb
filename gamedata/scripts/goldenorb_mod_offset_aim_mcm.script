----------------------------------------------------------------------------
-- GoldenOrb: Offset Aim Camera Modifier
----------------------------------------------------------------------------
-- Implemented by Lhan
----------------------------------------------------------------------------

-- Imports

--- HUD offset rotation
local apply_hud_offset_rot = goldenorb_mod_hud_offset_rot.apply_hud_offset_rot

--- Data
local get_camera_delta_rotation = goldenorb_camera.get_camera_delta_rotation

--- Math
local deg = goldenorb_math.deg

--- MCM Builder
local ImageWithText = mcm_builder.ImageWithText
local Checkbox = mcm_builder.Checkbox
local Trackbar = mcm_builder.Trackbar

--- Logging
local log = goldenorb_logging.log

-- State

page = goldenorb_mcm.tree:pages("offset_aim")

page:settings(
   ImageWithText.new("offset_aim_title")
    :text("offset_aim")
)

local enabled, limit_yaw, limit_pitch = page:settings(
    Checkbox.new("enabled"):default(false),
    Trackbar.new("horizontal_limit")
      :default(6)
      :increment(0.05)
      :minmax(0, 90),
    Trackbar.new("vertical_limit")
      :default(4.5)
      :increment(0.05)
      :minmax(0, 90)
)

local yaw = 0
local pitch = 0

-- Implementation

function offset_aim(state)
   log("offset_aim(%s)", state)

   if not enabled:get() then
      return state
   end

   if not state.wpn then
      log("No weapon in state, returning...")
      return state
   end

   local delta_rot = get_camera_delta_rotation()
   log("  delta_rot: %s", delta_rot)

   local lx, ly = limit_yaw:get(), limit_pitch:get()

   yaw = math.max(math.min(yaw - deg(delta_rot.x), lx), -lx)
   pitch = math.max(math.min(pitch + deg(delta_rot.y), ly), -ly)
   printf("  yaw: %s", yaw)
   printf("  pitch: %s", pitch)

   if state.hud then
      log("Setting hands orientation")
      state.hud.hands_orientation = state.hud.hands_orientation
         :add(vector():set(yaw, pitch, 0))
   end

   return state
end

function on_game_start()
   goldenorb_main.ACTOR_ON_UPDATE
      :after(apply_hud_offset_rot, offset_aim)
end
