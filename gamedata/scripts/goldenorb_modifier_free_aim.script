----------------------------------------------------------------------------
-- GoldenOrb: Free Aim Camera Modifier
----------------------------------------------------------------------------
-- Implemented by Lhan
----------------------------------------------------------------------------

-- Imports

--- Math
local PI = goldenorb_math.PI
local sign = goldenorb_math.sign
local vector_rotate_y = goldenorb_math.vector_rotate_y

--- Camera
local get_hands_direction = goldenorb_weapon.get_hands_direction

--- Logging
local log = goldenorb_logging.log

-- Constants

RUN = true

EYE_HEIGHT = 1.671 --1.6585

LIMIT = vector():set(
   PI / 4, -- PI / 8,
   PI / 8, -- PI / 12,
   0
)

-- State

local cam_rot = vector()

-- Implementation

function free_aim(state)
   log("free_aim(%s)", state)

   if not RUN then
      return state
   end

   if not state.actor then
      return state
   end

   if not state.wpn then
      return state
   end

   log("  cam_rot: %s", cam_rot)
   log("  limit: %s", LIMIT)

   local hands_dir = get_hands_direction():normalize()
   log("  hands_dir: %s", hands_dir)

   local delta_pitch = math.asin(hands_dir.y) - cam_rot.x
   log("  delta_pitch: %s", delta_pitch)

   if math.abs(delta_pitch) > LIMIT.y then
      log("  pitch moved beyond limit")
      cam_rot.x = cam_rot.x + (math.abs(delta_pitch) - LIMIT.y) * sign(delta_pitch)
   end


   local cam_xz = vector_rotate_y(vector():set(0, 0, 1), cam_rot.y)

   hands_dir.y = 0
   hands_dir = hands_dir:normalize()

   local delta_yaw = math.atan2(
      vector_cross(cam_xz, hands_dir):dotproduct(vector():set(0, 1, 0)),
      cam_xz:dotproduct(hands_dir)
   )
   log("  delta_yaw: %s", delta_yaw)

   if math.abs(delta_yaw) > LIMIT.x then
      log("  yaw moved beyond limit")
      cam_rot.y = cam_rot.y + (math.abs(delta_yaw) - LIMIT.x) * sign(delta_yaw)
   end

   log("  cam_rot: %s", cam_rot)

   state.cam.enable = true
   state.cam.pos = state.actor:position():add(vector():set(0, EYE_HEIGHT, 0))
   state.cam.rot = vector():set(-cam_rot.y, cam_rot.x, 0)
   state.cam.affect_hud = false

   if state.hud then
      --state.hud.hands_position.z = state.hud.hands_position.z - 0.025
      --state.hud.hands_position.z = state.hud.hands_position.z + 0.1
      state.hud.hands_orientation.x = state.hud.hands_orientation.x - 0.49
   end

   return state
end
