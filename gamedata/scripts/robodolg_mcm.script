----------------------------------------------------------------------------
-- RoboDolg
----------------------------------------------------------------------------
-- 
-- Vector HUD for Anomaly
-- 
----------------------------------------------------------------------------
-- Implemented by Lhan
----------------------------------------------------------------------------

-- Imports

--- MCM Builder
local ImageWithText = mcm_builder.ImageWithText
local Checkbox = mcm_builder.Checkbox

--- RoboDolg Shapes
local reset = robodolg_shapes.reset

--- Logging
local log = goldenorb_logging.log

-- State

tree = goldenorb_mcm.tree:subtrees("robodolg")

local page = tree:pages("core")

page:settings(
   ImageWithText.new("robodolg_title"):text("robodolg")
)
local enabled = page:settings(
   Checkbox.new("enabled"):default(true)
)

--- Cache of state from actor update
local cache = nil

-- Implementation

--- Intercept the state and cache it for later
function cache_state(state)
   cache = state
   return state
end

--- Use the cached stated to draw robodolg modules
function draw_robodolg()
   log("draw_robodolg()")
   reset()

   if not enabled:get() then
      return
   end

   if cache then
      SendScriptCallback("robodolg_on_draw", cache)
   end
end

--- Entrypoint
function on_game_start()
   log("robodolg.on_game_start")

   -- Declare our draw callback
   AddScriptCallback("robodolg_on_draw")

   -- Register with GoldenOrb's update callback
   goldenorb_main.ACTOR_ON_UPDATE:add_call(cache_state)

   -- Register a unique level call
   -- so we can draw in sync with the debug renderer
   AddUniqueCall(draw_robodolg)
end
