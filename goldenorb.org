#TITLE GoldenOrb

Total camera and aiming overhaul for Anomaly.

* Design Document
** Mod Compatibility
*** Fundamental
**** Parallax Reflex Sights
**** Shader 3D Scopes

*** Repositions
**** Private's Gun Reposition
https://www.moddb.com/mods/stalker-anomaly/addons/privates-gun-reposition-aka-pgr
- Baked-in zoom FOV
- Works nicely when overridden

**** Position and View 2.1
https://www.moddb.com/mods/stalker-anomaly/addons/position-and-view-v21-release
- Incompatible by default
  - Overrides 3DSS with 2D scopes
  - Baked-in zoom FOV
  - Incorrect positions (possibly down to uncorrected HUD offsets)

**** EFT Reposition
- Testing required

*** Reanimations
**** Gunslinger
- Baked-in zoom FOV
  - Need to re-test

** Features
- [ ] Reimplement recoil via decouple aim point
  - Can use the consumed values to inform a custom treatment
    - Can add an additional recoil transform to the HUD model and aggregate it from composable property animations (i.e. add one per shot, auto-cleanup finished)
    - Can use physical weapon properties to calculate kick direction and force
      - Account for:
        - Caliber, barrel length, (handle position?) for vertical component
        - Built-in stats as a vague abstraction over weight / power ratio
        - Position relative to shooter's center of mass for horizontal component
  - Alternately, just turn regular recoil back on and let mods handle it
    - Likely possible now aiming is properly integrated with the HUD skeleton
- [ ] Player Inertia
  - Can implement a spring-damper system driven by position delta and use it to drive a camera offset
    - Potential to drive it via the third-person skeleton as an offset
- [ ] Variable Crouch and Lean
  - Can use a System Shock approach and have a 9x9 grid
    - Lean Left / Stand / Lean Right on X axis
    - Stand / Crouch / Prone on Y axis
    - Maintain a point within this space
      - Map lean keys to modify X axis
      - Crouch moves -Y
      - Prone moves +Y
      - Alternately, implement a modifier key to control via mouse?
        - Probably not tractable given that mouse controls aim
      - Mousewheel is viable for Y axis
    - Potential to implement sprint as an extension of the Y axis
      - 'Above standing'
    - Likewise, potential to implement slow-walking in the region between standing and crouching
    - Trigger the appropriate state when the camera enters a given cell
      - Will need to apply partial offsets to prevent the arm animations from going out of sync
- [ ] Variable character speed?
  - Similar to Ready or Not
    - Use mousewheel for granular control over movement speed
  - A proper treatment would involve reimplementing sprint
    - Including animation, which is a lot more tricky
- [ ] Improved Free Look
  - Toggle?
  - Allow gun to follow aim


** DONE
- [X] Fix 3DSS distortion when displayed off-center
  - Will likely need to reverse-engineer unless LVutner comes through with info

** TODO
*** Core
- [ ] Further generalize execution model
  - Standardize around monadic state
    - Don't use an explicit state monad; just pass state and keep it pure
      - Will need to refactor various getter methods to avoid using globals
  - Allows the update callback / modifier distinction to be erased
- [ ] Tie module state to character state
  - i.e. Being able to have autoaim while unscoped, detached while scoped, different behaviour based on player state, any and all combinations of the above
  - Ergo, will need a condlist interface since the problem space is way too big for MCM
- [ ] MCM Key Bindings
  - Dedicated look modifier for switching between modesets
    
*** Hands
- [ ] Rotate origin around eye when scoped
  - Necessary to ensure consistent distance and rotation w.r.t camera
    - Guarantees that the reticle aligns with the far-plane barrel projection
ADS
- [ ] Generalize cursor restriction into a module interface
  - Free and Offset aim both use their own restriction formulation
    - Need to refactor them to share common code via restrictor module
- [ ] Visualize cursor restriction with RoboDolg
- [ ] Extend cursor restriction
  - Allow box and circle shapes
    - Position + size for flexibility
  - Use a spring to allow for soft edges
    - i.e. A region where camera motion scales up to full 1:1
- [ ] Generalize existing 'offset aim' behaviour into an interface module
  - Will be needed so it can share code with an auto-aiming module

*** Weapon
- [ ] Goldeneye-style auto-aim
  - Need to search for visible actors, pick closest / most relevant
    - Can use skeletons to target closest body part
  - Ergo, need an interface that allows such a system to feed crosshair offsets
  - Good test case for the iterate-by-distance function
  - Should be tractable in both fixed and free aim modes by introducing an extra offset transform to the HUD model
- [ ] Aimable knife
  - Regular knife 'fires' from somewhere around the torso bone
  - Needs to hit from the blade in order to take advantage of decoupled aiming
  - Potential for fancy mouse-driven CQC with appropriate rotation control
    - Follow velocity, apply damage based on speed
    - Retain baked-in moves via left / right click
    - Need to investigate whether existing knife behaviour is engine-side
- [ ] Aimable bolts
  - Regular bolt fires relative to the camera rather than the arms
    
*** RoboDolg
Vector debug UI framework.

- [ ] Decouple RoboDolg from GoldenOrb update
  - Needs to update via ~level~ instead of ~actor~ in order to properly synchronize with the camera
  - Whereas GoldenOrb needs to update via ~actor~ in order to properly synchronize with the arms mesh
  - Need to test and see where is optimal to update HUD repositioning
- [ ] Object pooling
  - The debug rendering API design suggests its objects are persistent
  - If so, need to implement a pooling system and reuse them instead of allocating new ones every frame
- [ ] Full RoboDolg HUD?
  - Health
  - Stamina
  - Ammo
  - Reticle
  - Character targeting
    - Name, faction, etc readout
  - Metroid prime visor effect?

*** 3DSS
- [-] Lanczos filter for back image
  - [X] Implement RetroArch lanczos2_sharp as proof-of-concept
  - [X] Implement choice of filter via shader macro
    - Possibility to feed it in via the params struct, but unsure as to how much bandwidth remains unused
  - [X] Implement bicubic sampling
  - [ ] Implement a more permissively-licensed variant of Lanczos so it can be contributed
- [ ] Increased maximum for MCM zoom factor
  - [ ] Work around via ~run_script~
  - [ ] Formalize somehow, monkey patch?
- [ ] Per-scope zoom factors
